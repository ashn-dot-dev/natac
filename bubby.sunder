namespace bubby;
import "std";

enum kind {
    STR;
    VEC;
    MAP;
    SET;
}

struct value {
    var _kind: kind;
    var _data: union {
        var str: []byte;
        var vec: std::vector[[value]];
        var map: std::hash_map[[void, void]]; # std::hash_map[[value, value]];
        var set: std::hash_set[[void]];       # std::hash_set[[value]];
    };

    let _SELF: value = uninit;

    func init_str(str: []byte) value {
        var new = std::str::new(str);
        return (:value){
            ._kind = bubby::kind::STR,
            ._data = (:typeof(value::_SELF._data)){.str = new},
        };
    }

    func init_str_from_format(format: []byte, args: []std::formatter) value {
        var s = std::string::init_from_format(format, args);
        defer s.fini();
        var new = std::str::new(s.data());
        return (:value){
            ._kind = bubby::kind::STR,
            ._data = (:typeof(value::_SELF._data)){.str = new},
        };
    }

    func init_vec() value {
        var new = std::vector[[value]]::init();
        return (:value){
            ._kind = bubby::kind::VEC,
            ._data = (:typeof(value::_SELF._data)){.vec = new},
        };
    }

    func init_map() value {
        var new = std::hash_map[[value, value]]::init();
        var new = *(:*std::hash_map[[void, void]])&new;
        return (:value){
            ._kind = bubby::kind::MAP,
            ._data = (:typeof(value::_SELF._data)){.map = new},
        };
    }

    func init_set() value {
        var new = std::hash_set[[value]]::init();
        var new = *(:*std::hash_set[[void]])&new;
        return (:value){
            ._kind = bubby::kind::SET,
            ._data = (:typeof(value::_SELF._data)){.set = new},
        };
    }

    func init_from_str(str: []byte) std::result[[value, std::error]] {
        var result = bubby::parse(str);
        if result.is_error() {
            return std::result[[value, std::error]]::init_error(result.error().error);
        }
        if result.value().index != countof(str) {
            return std::result[[value, std::error]]::init_error(std::error::PARSE_FAILURE);
        }
        return std::result[[value, std::error]]::init_value(result.value().value);
    }

    func fini(self: *value) void {
        switch self.*._kind {
        bubby::kind::STR {
            std::str::delete(self.*._data.str);
            return;
        }
        bubby::kind::VEC {
            std::vector[[value]]::fini(self.*.vec());
            return;
        }
        bubby::kind::MAP {
            std::hash_map[[value, value]]::fini(self.*.map());
            return;
        }
        bubby::kind::SET {
            std::hash_set[[value]]::fini(self.*.set());
            return;
        }
        }

        std::unreachable(fileof(), lineof());
    }

    func hash(self: *value) usize {
        switch self.*._kind {
        bubby::kind::STR {
            return self.*._data.str.hash();
        }
        bubby::kind::VEC {
            var hash = 0u;
            var iter = std::slice_iterator[[value]]::init(self.*._data.vec.data());
            for iter.advance() {
                hash +%= value::hash(iter.current());
            }
            return hash;
        }
        bubby::kind::MAP {
            var map = self.*.map();
            var hash = 0u;
            var iter = std::hash_map_iterator[[value, value]]::init(map);
            for iter.advance() {
                var hash_key = iter.current().*.key.*.hash();
                var hash_val = iter.current().*.value.*.hash();
                hash +%= hash_key +% hash_val;
            }
            return hash;
        }
        bubby::kind::SET {
            var set = self.*.set();
            var hash = 0u;
            var iter = std::hash_set_iterator[[value]]::init(set);
            for iter.advance() {
                hash +%= iter.current().*.hash();
            }
            return hash;
        }
        }

        std::unreachable(fileof(), lineof());
        return 0;
    }

    func eq(lhs: *value, rhs: *value) bool {
        if lhs.*._kind != rhs.*._kind {
            return false;
        }

        switch lhs.*._kind {
        bubby::kind::STR {
            return std::eq[[[]byte]](&lhs.*._data.str, &rhs.*._data.str);
        }
        bubby::kind::VEC {
            if lhs.*._data.vec.count() != rhs.*._data.vec.count() {
                return false;
            }
            var lhs_iter = std::slice_iterator[[value]]::init(lhs.*._data.vec.data());
            var rhs_iter = std::slice_iterator[[value]]::init(rhs.*._data.vec.data());
            for lhs_iter.advance() and rhs_iter.advance() {
                if not std::eq[[value]](lhs_iter.current(), rhs_iter.current()) {
                    return false;
                }
            }
            return true;
        }
        bubby::kind::MAP {
            var lhs_map = lhs.*.map();
            var rhs_map = rhs.*.map();
            if lhs_map.*.count() != rhs_map.*.count() {
                return false;
            }
            var lhs_iter = std::hash_map_iterator[[value, value]]::init(lhs_map);
            for lhs_iter.advance() {
                var lhs_current = lhs_iter.current();
                var rhs_current = rhs_map.*.lookup_view(lhs_current.*.key);
                if rhs_current.is_empty() {
                    return false;
                }
                var rhs_current = rhs_current.value();
                if not std::eq[[value]](lhs_current.*.value, rhs_current.value) {
                    return false;
                }
            }
            return true;
        }
        bubby::kind::SET {
            var lhs_set = lhs.*.set();
            var rhs_set = rhs.*.set();
            if lhs_set.*.count() != rhs_set.*.count() {
                return false;
            }
            var lhs_iter = std::hash_set_iterator[[value]]::init(lhs_set);
            for lhs_iter.advance() {
                var lhs_current = lhs_iter.current();
                var rhs_current = rhs_set.*.lookup(lhs_current);
                if rhs_current.is_empty() {
                    return false;
                }
                var rhs_current = rhs_current.value();
                if not std::eq[[value]](lhs_current, rhs_current) {
                    return false;
                }
            }
            return true;
        }
        }

        std::unreachable(fileof(), lineof());
        return false;
    }

    # Accepted format specifiers:
    #   ""             => default (ASCII bytes " and \ are escaped)
    #   "e", "escaped" => escaped (non-prinatble ASCII bytes, ", and \ are escaped)
    func format(self: *value, writer: std::writer, fmt: []byte) std::result[[void, std::error]] {
        var escaped = false;
        if countof(fmt) == 0 {
            # Default non-escaped format is already false.
        }
        elif std::str::eq(fmt, "e") or std::str::eq(fmt, "escaped") {
            escaped = true;
        }
        else {
            return std::result[[void, std::error]]::init_error(std::error::INVALID_ARGUMENT);
        }

        switch self.*._kind {
        bubby::kind::STR {
            var result = std::write_all(writer, "\"");
            if result.is_error() {
                return result;
            }
            # All non-printable bytes, plus the double quote used to denote the
            # start and end of the string, are printed using escaped hex bytes.
            for i in countof(self.*._data.str) {
                var c = self.*._data.str[i];
                if c == '\"' or c == '\\' or escaped and (c < ' ' or c > '~') {
                    let DIGITS = (:[]byte)[
                        '0', '1', '2', '3', '4', '5', '6', '7',
                        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
                    ];
                    var hex = (:[]byte)[
                        DIGITS[(:usize)c & 0xF0 >> 4],
                        DIGITS[(:usize)c & 0x0F]
                    ];
                    var result = std::write_format(
                        writer,
                        "\\x{}",
                        (:[]std::formatter)[
                            std::formatter::init[[[]byte]](&hex)]);
                    if result.is_error() {
                        return result;
                    }
                    continue;
                }
                var result = std::write_all(writer, (:[]byte){&c, 1});
                if result.is_error() {
                    return result;
                }
            }
            return std::write_all(writer, "\"");
        }
        bubby::kind::VEC {
            var result = std::write_all(writer, "[");
            if result.is_error() {
                return result;
            }
            var sep = "";
            var iter = std::slice_iterator[[value]]::init(self.*._data.vec.data());
            for iter.advance() {
                var result = std::write_format(
                    writer,
                    "{}{}",
                    (:[]std::formatter)[
                        std::formatter::init[[[]byte]](&sep),
                        std::formatter::init[[value]](iter.current())]);
                if result.is_error() {
                    return result;
                }
                sep = " ";
            }
            return std::write_all(writer, "]");

        }
        bubby::kind::MAP {
            var map = self.*.map();
            var result = std::write_all(writer, "{");
            if result.is_error() {
                return result;
            }
            var sep = "";
            var iter = std::hash_map_iterator[[value, value]]::init(map);
            for iter.advance() {
                var result = std::write_format(
                    writer,
                    "{}{} {}",
                    (:[]std::formatter)[
                        std::formatter::init[[[]byte]](&sep),
                        std::formatter::init[[value]](iter.current().*.key),
                        std::formatter::init[[value]](iter.current().*.value)]);
                if result.is_error() {
                    return result;
                }
                sep = " ";
            }
            return std::write_all(writer, "}");
        }
        bubby::kind::SET {
            var set = self.*.set();
            var result = std::write_all(writer, "(");
            if result.is_error() {
                return result;
            }
            var sep = "";
            var iter = std::hash_set_iterator[[value]]::init(set);
            for iter.advance() {
                var result = std::write_format(
                    writer,
                    "{}{}",
                    (:[]std::formatter)[
                        std::formatter::init[[[]byte]](&sep),
                        std::formatter::init[[value]](iter.current())]);
                if result.is_error() {
                    return result;
                }
                sep = " ";
            }
            return std::write_all(writer, ")");
        }
        }

        std::unreachable(fileof(), lineof());
        return std::zeroed[[std::result[[void, std::error]]]]();
    }

    func kind(self: *value) bubby::kind {
        return self.*._kind;
    }

    func str(self: *value) []byte {
        assert self.*._kind == bubby::kind::STR;
        return self.*._data.str;
    }

    func vec(self: *value) *std::vector[[value]] {
        assert self.*._kind == bubby::kind::VEC;
        return &self.*._data.vec;
    }

    func map(self: *value) *std::hash_map[[value, value]] {
        assert self.*._kind == bubby::kind::MAP;
        return (:*std::hash_map[[value, value]])&self.*._data.map;
    }

    func map_insert_str(self: *value, str: []byte, val: bubby::value) void {
        self.*.map().*.insert(value::init_str(str), val);
    }

    func map_lookup_str(self: *value, str: []byte) std::optional[[*value]] {
        var optional = self.*.map_lookup_view_str(str);
        if optional.is_empty() {
            return std::optional[[*value]]::EMPTY;
        }
        return std::optional[[*value]]::init_value(optional.value().value);
    }

    func map_xlookup_str(self: *value, str: []byte) *value {
        var optional = self.*.map_lookup_str(str);
        return optional.value();
    }

    func map_lookup_view_str(self: *value, str: []byte) std::optional[[std::key_value_view[[value, value]]]] {
        var key = (:value){
            ._kind = bubby::kind::STR,
            ._data = (:typeof(value::_SELF._data)){.str = str},
        };
        return self.*.map().*.lookup_view(&key);
    }

    func map_xlookup_view_str(self: *value, str: []byte) std::key_value_view[[value, value]] {
        var optional = self.*.map_lookup_view_str(str);
        return optional.value();
    }

    func set(self: *value) *std::hash_set[[value]] {
        assert self.*._kind == bubby::kind::SET;
        return (:*std::hash_set[[value]])&self.*._data.set;
    }

    func set_insert(self: *value, val: bubby::value) void {
        self.*.set().*.insert(val);
    }
}

func _is_whitespace(char: byte) bool {
    return char == ' ' or char == '\t' or char == '\n';
}

struct parse_success {
    var value: bubby::value;
    var index: usize;
}

struct parse_failure {
    var error: std::error;
    var index: usize;
}

type parse_result = std::result[[parse_success, parse_failure]];

func parse_str(str: []byte) bubby::parse_result {
    if countof(str) == 0 {
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = 0,
        });
    }

    var cur = 0u;
    var buf = std::slice[[byte]]::new(0);
    if cur == countof(str) or str[cur] != '\"' {
        std::slice[[byte]]::delete(buf);
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = cur,
        });
    }
    cur += 1;
    for cur != countof(str) and str[cur] != '\"' {
        var c = str[cur];
        if c != '\\' {
            buf = std::slice[[byte]]::resize(buf, countof(buf)+1);
            buf[countof(buf)-1] = c;
            cur += 1;
            continue;
        }
        if countof(str) - cur < countof("\\xXX") {
            std::slice[[byte]]::delete(buf);
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = std::error::PARSE_FAILURE,
                .index = cur,
            });
        }
        var hex = str[cur:cur+countof("\\xXX")];
        if hex[0] != '\\' or hex[1] != 'x' {
            std::slice[[byte]]::delete(buf);
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = std::error::PARSE_FAILURE,
                .index = cur,
            });
        }
        let DIGITS = "0123456789ABCDEF";
        var hi = std::str::find(DIGITS, (:[]byte){&hex[2], 1});
        var lo = std::str::find(DIGITS, (:[]byte){&hex[3], 1});
        if hi.is_empty() or lo.is_empty() {
            std::slice[[byte]]::delete(buf);
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = std::error::PARSE_FAILURE,
                .index = cur,
            });
        }
        var c = (:byte)(hi.value() << 4) | (:byte)lo.value();
        buf = std::slice[[byte]]::resize(buf, countof(buf)+1);
        buf[countof(buf)-1] = c;
        cur += 4;
    }
    if cur == countof(str) or str[cur] != '\"' {
        std::slice[[byte]]::delete(buf);
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = cur,
        });
    }
    cur += 1;
    return bubby::parse_result::init_value((:parse_success){
        .value = (:value){
            ._kind = bubby::kind::STR,
            ._data = (:typeof(value::_SELF._data)){.str = buf},
        },
        .index = cur,
    });
}

func parse_vec(str: []byte) bubby::parse_result {
    if countof(str) == 0 {
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = 0,
        });
    }

    var cur = 0u;
    var out = value::init_vec();
    if cur == countof(str) or str[cur] != '[' {
        out.fini();
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = cur,
        });
    }
    cur += 1;
    for cur != countof(str) {
        # Require space separation between elements or optional space separation before the terminating ']'.
        if out.vec().*.count() != 0 and cur != countof(str) and str[cur] != ']' and not bubby::_is_whitespace(str[cur]) {
            out.fini();
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = std::error::PARSE_FAILURE,
                .index = cur,
            });
        }
        for cur != countof(str) and bubby::_is_whitespace(str[cur]) {
            cur += 1;
        }
        if cur != countof(str) and str[cur] == ']' {
            break;
        }

        var result = bubby::parse(str[cur:countof(str)]);
        if result.is_error() {
            out.fini();
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = result.error().error,
                .index = cur + result.error().index,
            });
        }
        cur += result.value().index;
        out.vec().*.push(result.value().value);
    }
    if cur == countof(str) or str[cur] != ']' {
        out.fini();
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = cur,
        });
    }
    cur += 1;
    return bubby::parse_result::init_value((:bubby::parse_success){
        .value = out,
        .index = cur,
    });
}

func parse_map(str: []byte) bubby::parse_result {
    if countof(str) == 0 {
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = 0,
        });
    }

    var cur = 0u;
    var out = value::init_map();
    if cur == countof(str) or str[cur] != '{' {
        out.fini();
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = cur,
        });
    }
    cur += 1;
    for cur != countof(str) {
        # Require space separation between key-value pairs or optional space separation before the terminating '}'.
        if out.map().*.count() != 0 and cur != countof(str) and str[cur] != '}' and not bubby::_is_whitespace(str[cur]) {
            out.fini();
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = std::error::PARSE_FAILURE,
                .index = cur,
            });
        }
        for cur != countof(str) and bubby::_is_whitespace(str[cur]) {
            cur += 1;
        }
        if cur != countof(str) and str[cur] == '}' {
            break;
        }

        var result = bubby::parse(str[cur:countof(str)]);
        if result.is_error() {
            out.fini();
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = result.error().error,
                .index = cur + result.error().index,
            });
        }
        cur += result.value().index;
        var key = result.value().value;

        if out.map().*.contains(&key) {
            out.fini();
            key.fini();
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = (:std::error)&"duplicate map key",
                .index = cur,
            });
        }

        # Require space separation between the key and value.
        if cur == countof(str) or not bubby::_is_whitespace(str[cur]) {
            out.fini();
            key.fini();
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = std::error::PARSE_FAILURE,
                .index = cur,
            });
        }
        for cur != countof(str) and bubby::_is_whitespace(str[cur]) {
            cur += 1;
        }
        var result = bubby::parse(str[cur:countof(str)]);
        if result.is_error() {
            out.fini();
            key.fini();
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = result.error().error,
                .index = cur + result.error().index,
            });
        }
        cur += result.value().index;
        var val = result.value().value;

        out.map().*.insert(key, val);
    }
    if cur == countof(str) or str[cur] != '}' {
        out.fini();
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = cur,
        });
    }
    cur += 1;
    return bubby::parse_result::init_value((:bubby::parse_success){
        .value = out,
        .index = cur,
    });
}

func parse_set(str: []byte) bubby::parse_result {
    if countof(str) == 0 {
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = 0,
        });
    }

    var cur = 0u;
    var out = value::init_set();
    if cur == countof(str) or str[cur] != '(' {
        out.fini();
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = cur,
        });
    }
    cur += 1;
    for cur != countof(str) {
        # Require space separation between elements or optional space separation before the terminating ')'.
        if out.set().*.count() != 0 and cur != countof(str) and str[cur] != ')' and not bubby::_is_whitespace(str[cur]) {
            out.fini();
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = std::error::PARSE_FAILURE,
                .index = cur,
            });
        }
        for cur != countof(str) and bubby::_is_whitespace(str[cur]) {
            cur += 1;
        }
        if cur != countof(str) and str[cur] == ')' {
            break;
        }

        var result = bubby::parse(str[cur:countof(str)]);
        if result.is_error() {
            out.fini();
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = result.error().error,
                .index = cur + result.error().index,
            });
        }
        cur += result.value().index;
        var val = result.value().value;

        if out.set().*.contains(&val) {
            val.fini();
            out.fini();
            return bubby::parse_result::init_error((:bubby::parse_failure){
                .error = (:std::error)&"duplicate set element",
                .index = cur,
            });
        }

        out.set().*.insert(val);
    }
    if cur == countof(str) or str[cur] != ')' {
        out.fini();
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = cur,
        });
    }
    cur += 1;
    return bubby::parse_result::init_value((:bubby::parse_success){
        .value = out,
        .index = cur,
    });
}

func parse(str: []byte) bubby::parse_result {
    if countof(str) == 0 {
        return bubby::parse_result::init_error((:bubby::parse_failure){
            .error = std::error::PARSE_FAILURE,
            .index = 0,
        });
    }

    if str[0] == '\"' {
        return bubby::parse_str(str);
    }

    if str[0] == '[' {
        return bubby::parse_vec(str);
    }

    if str[0] == '{' {
        return bubby::parse_map(str);
    }

    if str[0] == '(' {
        return bubby::parse_set(str);
    }

    return bubby::parse_result::init_error((:bubby::parse_failure){
        .error = std::error::PARSE_FAILURE,
        .index = 0,
    });
}
