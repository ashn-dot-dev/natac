import "std";

struct person {
    var name: []byte;

    func format(self: *person, writer: std::writer, fmt: []byte) std::result[[void, std::error]] {
        if countof(fmt) != 0 {
            return std::result[[void, std::error]]::init_error(std::error::INVALID_ARGUMENT);
        }
        return std::write_all(writer, self.*.name);
    }
}

struct int {
    func format(self_: *int, writer: std::writer, fmt: []byte) std::result[[void, std::error]] {
        if countof(fmt) == 0 {
            return std::write_all(writer, "decimal");
        }

        var c: byte = fmt[0];
        if c == 'd' {
            return std::write_all(writer, "decimal");
        }
        if c == 'b' {
            return std::write_all(writer, "binary");
        }
        if c == 'o' {
            return std::write_all(writer, "octal");
        }
        if c == 'x' {
            return std::write_all(writer, "hexadecimal");
        }

        return std::result[[void, std::error]]::init_error(std::error::INVALID_ARGUMENT);
    }
}

func test0() void {
    var alice: person = (:person){.name = "Alice"};
    var bob: person = (:person){.name = "Bob"};

    var args: [2]std::formatter = (:[2]std::formatter)[
        std::formatter::init[[person]](&alice),
        std::formatter::init[[person]](&bob)
    ];
    var result = std::write_format(std::out(), "{} and {}", args[0:countof(args)]);
    std::print(std::out(), "\n"); # Separate '\n' to test format string ending in "{}".
    assert result.is_value();
}

func test1() void {
    let i: int = (:int){};

    var args: [5]std::formatter = (:[5]std::formatter)[
        std::formatter::init[[int]](&i),
        std::formatter::init[[int]](&i),
        std::formatter::init[[int]](&i),
        std::formatter::init[[int]](&i),
        std::formatter::init[[int]](&i)
    ];
    var result = std::write_format(std::out(), "{} {d} {b} {o} {x}\n", args[0:countof(args)]);
    assert result.is_value();
}

func test2() void {
    var alice: person = (:person){.name = "Alice"};
    var bob: person = (:person){.name = "Bob"};

    var args: [2]std::formatter = (:[2]std::formatter)[
        std::formatter::init[[person]](&alice),
        std::formatter::init[[person]](&bob)
    ];
    var result = std::write_format(std::out(), "{{ {} {{ {} {{\n", args[0:countof(args)]);
    assert result.is_value();
}

func test3() void {
    var alice: person = (:person){.name = "Alice"};
    var bob: person = (:person){.name = "Bob"};

    var args: [2]std::formatter = (:[2]std::formatter)[
        std::formatter::init[[person]](&alice),
        std::formatter::init[[person]](&bob)
    ];
    var result = std::write_format(std::out(), "}} {} }} {} }}\n", args[0:countof(args)]);
    assert result.is_value();
}

func test4() void {
    var alice: person = (:person){.name = "Alice"};

    var args: [1]std::formatter = (:[1]std::formatter)[
        std::formatter::init[[person]](&alice)
    ];
    var result = std::write_format(std::out(), "{{{}\n", args[0:countof(args)]);
    assert result.is_value();
}

# Test that std::write_format works as expected when called with array-slice
# args. This is more of a test of array-slices than of std::write_format, but
# std::write_format is the primary use case for array-slices, so it is worth
# testing here.
func test5() void {
    var alice: person = (:person){.name = "Alice"};
    var bob: person = (:person){.name = "Bob"};

    var result = std::write_format(
        std::err(),
        "{} and {} as an array-slice\n",
        (:[]std::formatter)[
            std::formatter::init[[person]](&alice),
            std::formatter::init[[person]](&bob)]);
    assert result.is_value();
}

func main() void {
    test0();
    test1();
    test2();
    test3();
    test4();
    test5();
}
################################################################################
# Alice and Bob
# decimal decimal binary octal hexadecimal
# { Alice { Bob {
# } Alice } Bob }
# {Alice
# Alice and Bob as an array-slice
