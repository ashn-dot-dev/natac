import "sys";

# Function that takes values to make sure logic is executed at runtime and not
# at compile time in a constant expression.
func test_rem[[T]](dividend: T, divisor: T) void  {
    sys::dump[[T]](dividend % divisor);
}

func u_pos_rem_pos() void {
    test_rem[[u8]] (3, 1);
    test_rem[[u16]](3, 1);
    test_rem[[u32]](3, 1);
    test_rem[[u64]](3, 1);

    test_rem[[u8]] (3, 2);
    test_rem[[u16]](3, 2);
    test_rem[[u32]](3, 2);
    test_rem[[u64]](3, 2);

    test_rem[[u8]] (3, 3);
    test_rem[[u16]](3, 3);
    test_rem[[u32]](3, 3);
    test_rem[[u64]](3, 3);

    test_rem[[u8]] (3, 4);
    test_rem[[u16]](3, 4);
    test_rem[[u32]](3, 4);
    test_rem[[u64]](3, 4);
}

func s_pos_rem_pos() void {
    test_rem[[s8]] (+3, +1);
    test_rem[[s16]](+3, +1);
    test_rem[[s32]](+3, +1);
    test_rem[[s64]](+3, +1);

    test_rem[[s8]] (+3, +2);
    test_rem[[s16]](+3, +2);
    test_rem[[s32]](+3, +2);
    test_rem[[s64]](+3, +2);

    test_rem[[s8]] (+3, +3);
    test_rem[[s16]](+3, +3);
    test_rem[[s32]](+3, +3);
    test_rem[[s64]](+3, +3);

    test_rem[[s8]] (+3, +4);
    test_rem[[s16]](+3, +4);
    test_rem[[s32]](+3, +4);
    test_rem[[s64]](+3, +4);
}

func s_neg_rem_pos() void {
    test_rem[[s8]] (-3, +1);
    test_rem[[s16]](-3, +1);
    test_rem[[s32]](-3, +1);
    test_rem[[s64]](-3, +1);

    test_rem[[s8]] (-3, +2);
    test_rem[[s16]](-3, +2);
    test_rem[[s32]](-3, +2);
    test_rem[[s64]](-3, +2);

    test_rem[[s8]] (-3, +3);
    test_rem[[s16]](-3, +3);
    test_rem[[s32]](-3, +3);
    test_rem[[s64]](-3, +3);

    test_rem[[s8]] (-3, +4);
    test_rem[[s16]](-3, +4);
    test_rem[[s32]](-3, +4);
    test_rem[[s64]](-3, +4);
}

func s_pos_rem_neg() void {
    test_rem[[s8]] (+3, -1);
    test_rem[[s16]](+3, -1);
    test_rem[[s32]](+3, -1);
    test_rem[[s64]](+3, -1);

    test_rem[[s8]] (+3, -2);
    test_rem[[s16]](+3, -2);
    test_rem[[s32]](+3, -2);
    test_rem[[s64]](+3, -2);

    test_rem[[s8]] (+3, -3);
    test_rem[[s16]](+3, -3);
    test_rem[[s32]](+3, -3);
    test_rem[[s64]](+3, -3);

    test_rem[[s8]] (+3, -4);
    test_rem[[s16]](+3, -4);
    test_rem[[s32]](+3, -4);
    test_rem[[s64]](+3, -4);
}

func s_neg_rem_neg() void {
    test_rem[[s8]] (-3, -1);
    test_rem[[s16]](-3, -1);
    test_rem[[s32]](-3, -1);
    test_rem[[s64]](-3, -1);

    test_rem[[s8]] (-3, -2);
    test_rem[[s16]](-3, -2);
    test_rem[[s32]](-3, -2);
    test_rem[[s64]](-3, -2);

    test_rem[[s8]] (-3, -3);
    test_rem[[s16]](-3, -3);
    test_rem[[s32]](-3, -3);
    test_rem[[s64]](-3, -3);

    test_rem[[s8]] (-3, -4);
    test_rem[[s16]](-3, -4);
    test_rem[[s32]](-3, -4);
    test_rem[[s64]](-3, -4);
}

func main() void {
    u_pos_rem_pos();
    s_pos_rem_pos();
    s_neg_rem_pos();
    s_pos_rem_neg();
    s_neg_rem_neg();
}
################################################################################
# 00
# 00 00
# 00 00 00 00
# 00 00 00 00 00 00 00 00
# 01
# 01 00
# 01 00 00 00
# 01 00 00 00 00 00 00 00
# 00
# 00 00
# 00 00 00 00
# 00 00 00 00 00 00 00 00
# 03
# 03 00
# 03 00 00 00
# 03 00 00 00 00 00 00 00
# 00
# 00 00
# 00 00 00 00
# 00 00 00 00 00 00 00 00
# 01
# 01 00
# 01 00 00 00
# 01 00 00 00 00 00 00 00
# 00
# 00 00
# 00 00 00 00
# 00 00 00 00 00 00 00 00
# 03
# 03 00
# 03 00 00 00
# 03 00 00 00 00 00 00 00
# 00
# 00 00
# 00 00 00 00
# 00 00 00 00 00 00 00 00
# FF
# FF FF
# FF FF FF FF
# FF FF FF FF FF FF FF FF
# 00
# 00 00
# 00 00 00 00
# 00 00 00 00 00 00 00 00
# FD
# FD FF
# FD FF FF FF
# FD FF FF FF FF FF FF FF
# 00
# 00 00
# 00 00 00 00
# 00 00 00 00 00 00 00 00
# 01
# 01 00
# 01 00 00 00
# 01 00 00 00 00 00 00 00
# 00
# 00 00
# 00 00 00 00
# 00 00 00 00 00 00 00 00
# 03
# 03 00
# 03 00 00 00
# 03 00 00 00 00 00 00 00
# 00
# 00 00
# 00 00 00 00
# 00 00 00 00 00 00 00 00
# FF
# FF FF
# FF FF FF FF
# FF FF FF FF FF FF FF FF
# 00
# 00 00
# 00 00 00 00
# 00 00 00 00 00 00 00 00
# FD
# FD FF
# FD FF FF FF
# FD FF FF FF FF FF FF FF
