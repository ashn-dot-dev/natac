import "sys";

func main() void {
    # Equality comparison.
    var u8_eq_integer: bool = 1u8 == 1;
    var integer_eq_u8: bool = 1 == 1u8;
    sys::dump[[bool]](u8_eq_integer);
    sys::dump[[bool]](integer_eq_u8);

    # Order comparison.
    var u8_lt_integer: bool = 1u8 < 1;
    var integer_lt_u8: bool = 1 < 1u8;
    sys::dump[[bool]](u8_lt_integer);
    sys::dump[[bool]](integer_lt_u8);

    # Unary arithmetic expression.
    var pos: s32 = +123;
    var neg: s32 = -123;
    sys::dump[[s32]](pos);
    sys::dump[[s32]](neg);

    # Binary arithmetic expression.
    var u8_add_integer: u8 = 0xFEu8 + 1;
    var integer_add_u8: u8 = 1 + 0xFEu8;
    sys::dump[[u8]](u8_add_integer);
    sys::dump[[u8]](integer_add_u8);

    # Make sure constants fold at compile-time.
    var u8_add_integer_add_integer: u8 = 0xFCu8 + 1 + 2;
    var integer_add_integer_add_u8: u8 = 1 + 2 + 0xFCu8;
    sys::dump[[u8]](u8_add_integer_add_integer);
    sys::dump[[u8]](integer_add_integer_add_u8);

    # Array type, array literal, and index expression.
    var array: [1 + 2]byte = (:[3]byte)[1, 3, 5];
    sys::dump[[byte]](array[0]);
    sys::dump[[byte]](array[1]);
    sys::dump[[byte]](array[1 + 1]);
    array = (:[3]byte)[0xAB...];
    sys::dump[[[3]byte]](array);
    array = (:[3]byte)[1, 3, 5];
    sys::dump[[[3]byte]](array);

    # Slice literal.
    var slice: []byte = (:[]byte){&array[1], 2};
    sys::dump[[byte]](slice[0]);
    sys::dump[[byte]](slice[1]);

    # Slice expression.
    sys::dump[[byte]](array[1:3][0]);
    sys::dump[[byte]](array[1:3][1]);

    # For-range indices.
    for i in 0xA:0xF {
        sys::dump[[usize]](i);
    }

    # Function parameters and return.
    sys::dump[[s32]](myfunc(0xAB, 0xF00F));

    # Right hand side of assignment.
    let x: s32 = 135;
    sys::dump[[s32]](x);
    var y: s32 = 123;
    sys::dump[[s32]](y);
    y = 456;
    sys::dump[[s32]](y);
}

func myfunc(a: byte, b: usize) s32 {
    sys::dump[[byte]](a);
    sys::dump[[usize]](b);
    return 123;
}
################################################################################
# 01
# 01
# 00
# 00
# 7B 00 00 00
# 85 FF FF FF
# FF
# FF
# FF
# FF
# 01
# 03
# 05
# AB AB AB
# 01 03 05
# 03
# 05
# 03
# 05
# 0A 00 00 00 00 00 00 00
# 0B 00 00 00 00 00 00 00
# 0C 00 00 00 00 00 00 00
# 0D 00 00 00 00 00 00 00
# 0E 00 00 00 00 00 00 00
# AB
# 0F F0 00 00 00 00 00 00
# 7B 00 00 00
# 87 00 00 00
# 7B 00 00 00
# C8 01 00 00
