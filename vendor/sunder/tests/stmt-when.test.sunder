import "std";

struct foo {
    func eq(lhs_: *foo, rhs_: *foo) bool {
        return true;
    }
}

struct bar {
    func compare(lhs_: *bar, rhs_: *bar) ssize {
        return -1;
    }
}

func eq[[T]](lhs: *T, rhs: *T) bool {
    when defined(T::eq) {
        return T::eq(lhs, rhs);
    }
    else {
        return T::compare(lhs, rhs) == 0;
    }

    assert false;
    return false;
}

func f() ssize {
    # Test for a bug that was caused by incorrect when block code generation.
    var out = 123s;
    when true {
        out = 456;
        return out;
    }
    return out;
}

func main() void {
    var x: ssize = uninit;

    when true {
        # This code will undergo semantic analysis and compile.
        x = 123;
    }

    when false {
        # This code will *not* undergo semantic analysis.
        x = "nope";
    }

    # The block for `when true` will undergo semantic analysis.
    when true {
        x = 123;
    }
    elwhen false {
        x = "nope";
    }

    # The block for `elwhen true` will undergo semantic analysis.
    when false {
        x = "nope";
    }
    elwhen true {
        x = 123;
    }

    # The block for `else` will undergo semantic analysis.
    when false {
        x = "nope";
    }
    elwhen false {
        x = "nope";
    }
    else {
        x = 123;
    }

    # Motivating use case for `when` - use with the `defined` expression.
    let FOO: void = uninit;
    when defined(FOO) {
        x = 123;
    }
    else {
        x = "nope";
    }

    # Motivating use case for `when` - use to specialize generics.
    var foo_a: foo = uninit;
    var foo_b: foo = uninit;
    var bar_a: bar = uninit;
    var bar_b: bar = uninit;
    assert eq[[foo]](&foo_a, &foo_b);
    assert not eq[[bar]](&bar_a, &bar_b);

    # Ensure that when interacts appropriately with defer.
    defer std::print_line(std::out(), "A");

    when true    { defer std::print_line(std::out(), "B"); }
    elwhen false { defer std::print_line(std::out(), "X"); }
    else         { defer std::print_line(std::out(), "X"); }

    when  false  { defer std::print_line(std::out(), "X"); }
    elwhen true  { defer std::print_line(std::out(), "C"); }
    else         { defer std::print_line(std::out(), "X"); }

    when false   { defer std::print_line(std::out(), "X"); }
    elwhen false { defer std::print_line(std::out(), "X"); }
    else         { defer std::print_line(std::out(), "D"); }

    when true {
        defer std::print_line(std::out(), "E");
        when true {
            defer std::print_line(std::out(), "F");
            when true {
                defer std::print_line(std::out(), "G");
            }
            defer std::print_line(std::out(), "H");
        }
        defer std::print_line(std::out(), "I");
    }

    # Misc. testing.
    var x = f();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[ssize]](&x)]);
}
################################################################################
# 456
# I
# H
# G
# F
# E
# D
# C
# B
# A
