import "std";
import "sys";

func dump_elements[[T]](pvec: *std::vector[[T]]) void {
    var slice: []T = pvec.*.data();
    for i in 0:countof(slice) {
        sys::dump[[T]](slice[i]);
    }
}

func main() void {
    var vec = std::vector[[u8]]::init();
    defer vec.fini();

    let A: u8 = 0xAA;
    let B: u8 = 0xBB;
    let C: u8 = 0xCC;

    # [A]
    vec.push(A);
    sys::dump[[usize]](vec.count());
    dump_elements[[u8]](&vec);

    # [A][B]
    vec.push(B);
    sys::dump[[usize]](vec.count());
    dump_elements[[u8]](&vec);

    # [A][B][C]
    vec.push(C);
    sys::dump[[usize]](vec.count());
    dump_elements[[u8]](&vec);

    # [A][B]
    vec.pop();
    sys::dump[[usize]](vec.count());
    dump_elements[[u8]](&vec);

    # [A]
    vec.pop();
    sys::dump[[usize]](vec.count());
    dump_elements[[u8]](&vec);

    # Empty
    vec.pop();
    sys::dump[[usize]](vec.count());
    dump_elements[[u8]](&vec);

    # Attempt to pop empty vec.
    vec.pop();
    sys::dump[[usize]](vec.count());
    dump_elements[[u8]](&vec);
}
################################################################################
# 01 00 00 00 00 00 00 00
# AA
# 02 00 00 00 00 00 00 00
# AA
# BB
# 03 00 00 00 00 00 00 00
# AA
# BB
# CC
# 02 00 00 00 00 00 00 00
# AA
# BB
# 01 00 00 00 00 00 00 00
# AA
# 00 00 00 00 00 00 00 00
# panic: attempted to pop empty vector
