import "c";
import "nbnet";
import "raylib";
import "std";

import "shared.sunder";

func render(state: client_state) void {
    BeginDrawing();
    ClearBackground(BLACK);

    DrawRectangle(
        (:sint)state.p1_paddle_x,
        (:sint)state.p1_paddle_y,
        PADDLE_W,
        PADDLE_H,
        WHITE,
    );
    DrawRectangle(
        (:sint)state.p2_paddle_x,
        (:sint)state.p2_paddle_y,
        PADDLE_W,
        PADDLE_H,
        WHITE,
    );
    DrawRectangle(
        (:sint)state.ball_x,
        (:sint)state.ball_y,
        BALL_SIDE,
        BALL_SIDE,
        WHITE,
    );

    DrawFPS(2, 2);

    let SCORE_OFFSET_X: sint = 50;
    let SCORE_OFFSET_Y: sint = 10;
    let FONT_SIZE: sint = 80;
    var text = std::string::init_from_format(
        "{}",
        (:[]std::formatter)[std::formatter::init[[uint]](&state.p1_score)]);
    defer text.fini();
    var size = MeasureText(text.cstr(), FONT_SIZE);
    DrawText(
        text.cstr(),
        (:sint)((:f32)WINDOW_W * 0.5) - size - SCORE_OFFSET_X,
        SCORE_OFFSET_Y,
        FONT_SIZE,
        WHITE,
    );
    var text = std::string::init_from_format(
        "{}",
        (:[]std::formatter)[std::formatter::init[[uint]](&state.p2_score)]);
    defer text.fini();
    DrawText(
        text.cstr(),
        (:sint)((:f32)WINDOW_W * 0.5) + SCORE_OFFSET_X,
        SCORE_OFFSET_Y,
        FONT_SIZE,
        WHITE,
    );

    let PRESS_SPACE_OFFSET_Y = 15.0f32;
    if state.server == state.player {
        let FONT_SIZE: sint = 48;
        let TEXT = startof("PRESS SPACE");
        var size = MeasureTextEx(GetFontDefault(), TEXT, (:f32)FONT_SIZE, 1.0f32);
        DrawText(
            TEXT,
            (:sint)((:f32)WINDOW_W * 0.5 - (:f32)size.x * 0.5),
            (:sint)((:f32)WINDOW_H * 0.5 - (:f32)size.y - PRESS_SPACE_OFFSET_Y),
            FONT_SIZE,
            WHITE,
        );
    }

    EndDrawing();
}

func usage() void {
    std::print_line(std::err(), "Usage: client IP-ADDRESS");
}

func main() void {
    var argparser = std::argument_parser::init((:[][]byte)[]);
    var ipaddr = std::optional[[[]byte]]::EMPTY;
    for argparser.advance() {
        if ipaddr.is_value() {
            usage();
            std::exit(std::EXIT_FAILURE);
        }
        ipaddr = std::optional[[[]byte]]::init_value(argparser.argument_value());
    }

    if ipaddr.is_empty() {
        usage();
        std::exit(std::EXIT_FAILURE);
    }
    var ipaddr = ipaddr.value();
    std::print_format_line(
        std::err(),
        "info: attempting to connect to IP address {}",
        (:[]std::formatter)[
            std::formatter::init[[[]byte]](&ipaddr)]);

    NBN_Driver_Init();
    if NBN_GameClient_StartEx(NAME, startof(ipaddr), PORT, false, std::ptr[[uint8_t]]::NULL, 0) < 0 {
        std::print_line(std::err(), "error: failed to start client");
        std::exit(std::EXIT_FAILURE);
    }
    defer NBN_GameClient_Stop();

    NBN_GameClient_RegisterMessage(
        client_message::TYPE,
        (:NBN_MessageBuilder)client_message::create,
        (:NBN_MessageDestructor)client_message::destroy,
        (:NBN_MessageSerializer)client_message::serialize);
    NBN_GameClient_RegisterMessage(
        server_message::TYPE,
        (:NBN_MessageBuilder)server_message::create,
        (:NBN_MessageDestructor)server_message::destroy,
        (:NBN_MessageSerializer)server_message::serialize);

    InitWindow(WINDOW_W, WINDOW_H, startof("Pong"));
    defer CloseWindow();
    SetTargetFPS((:sint)TICK_RATE);

    var state = client_state::INIT;
    var running = true;
    var connected = false;
    for not WindowShouldClose() and running {
        var actions = (:client_message){
            .direction = client_message::DIRECTION_NONE,
            .is_served = false,
        };

        if IsKeyDown(KEY_UP) or IsKeyDown(KEY_K) {
            actions.direction = actions.direction + client_message::DIRECTION_NEGATIVE_Y;
        }
        if IsKeyDown(KEY_DOWN) or IsKeyDown(KEY_J) {
            actions.direction = actions.direction + client_message::DIRECTION_POSITIVE_Y;
        }
        if IsKeyDown(KEY_SPACE) {
            actions.is_served = true;
        }

        for true {
            var ev = NBN_GameClient_Poll();

            if ev < 0 {
                std::print_line(std::err(), "error: failed to poll event");
                running = false;
                break;
            }

            if ev == NBN_NO_EVENT {
                break;
            }

            if ev == NBN_CONNECTED {
                std::print_line(std::err(), "info: connected");
                connected = true;
            }

            if ev == NBN_DISCONNECTED {
                std::print_line(std::err(), "info: disconnected");
                connected = false;
                running = false;
                if NBN_GameClient_GetServerCloseCode() == BUSY_CODE {
                    std::print_line(std::err(), "error: another client is already connected");
                }
                break;
            }

            if ev == NBN_MESSAGE_RECEIVED {
                std::print_line(std::err(), "info: message received");
                var info = NBN_GameClient_GetMessageInfo();
                assert info.type_ == server_message::TYPE;
                var incoming = (:*::server_message)info.data;

                state.p1_paddle_y = incoming.*.p1_paddle_y;
                state.p2_paddle_y = incoming.*.p2_paddle_y;
                state.ball_x = incoming.*.ball_x;
                state.ball_y = incoming.*.ball_y;
                state.p1_score = incoming.*.p1_score;
                state.p2_score = incoming.*.p2_score;
                state.server = incoming.*.server;
                state.player = incoming.*.player;

                server_message::destroy(incoming);
            }
        }

        if connected {
            var outgoing = client_message::create();
            *outgoing = actions;

            if NBN_GameClient_SendReliableMessage(client_message::TYPE, outgoing) < 0 {
                std::print_line(std::err(), "error: failed to send message");
                running = false;
                break;
            }
        }

        if NBN_GameClient_SendPackets() < 0 {
            std::print_line(std::err(), "error: failed to send packets");
            running = false;
            break;
        }

        render(state);
    }
}
