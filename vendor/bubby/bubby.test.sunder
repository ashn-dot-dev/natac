import "std";

import "bubby.sunder";

func test_value_to_string_to_value(x: *bubby::value) void {
    var s = std::string::init();
    defer s.fini();
    var writer = std::writer::init[[std::string]](&s);

    std::print_format(writer, "{escaped}", (:[]std::formatter)[std::formatter::init[[bubby::value]](x)]);
    var y = bubby::value::init_from_str(s.data());
    if y.is_error() {
        std::print_format_line(
            std::err(),
            "error: {}",
            (:[]std::formatter)[
                std::formatter::init[[[]byte]](&y.error().*.data)]);
        return;
    }
    var y = y.value();
    defer y.fini();
    if not std::eq[[bubby::value]](x, &y) {
        std::print_format_line(
            std::err(),
            "value->string->value roundtrip error:\n\tx = {escaped}\n\ty = {escaped}",
            (:[]std::formatter)[
                std::formatter::init[[bubby::value]](x),
                std::formatter::init[[bubby::value]](&y)]);
        return;
    }
}

func main() void {
    var allocator = std::general_allocator::init();
    defer allocator.fini();
    defer {
        var iter = std::general_allocator_iterator::init(&allocator);
        for iter.advance() {
            var size = iter.current().*.size();
            std::print_format_line(
                std::err(),
                "leaked allocation of size {}",
                (:[]std::formatter)[
                    std::formatter::init[[usize]](&size)]);
        }
    }
    var allocator = std::allocator::init[[typeof(allocator)]](&allocator);
    std::set_global_allocator(allocator);

    std::print_line(std::out(), "STR");

    var x = bubby::value::init_str("foo");
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_str("foo\nbar");
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_str("\\foo\tbar\nbaz\0\"qux\"");
    defer x.fini();
    std::print_format_line(std::out(), "{e}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_str("\\foo\tbar\nbaz\0\"qux\"");
    defer x.fini();
    std::print_format_line(std::out(), "{escaped}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "VEC");

    var x = bubby::value::init_vec();
    defer x.fini();
    x.vec().*.push(bubby::value::init_str("foo"));
    x.vec().*.push(bubby::value::init_str("bar"));
    x.vec().*.push(bubby::value::init_str("baz"));
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_vec();
    defer x.fini();
    x.vec().*.push(bubby::value::init_vec());
    x.vec().*.data()[0].vec().*.push(bubby::value::init_str("foo"));
    x.vec().*.data()[0].vec().*.push(bubby::value::init_str("bar"));
    x.vec().*.data()[0].vec().*.push(bubby::value::init_str("baz"));
    x.vec().*.push(bubby::value::init_vec());
    x.vec().*.data()[1].vec().*.push(bubby::value::init_vec());
    x.vec().*.data()[1].vec().*.data()[0].vec().*.push(bubby::value::init_vec());
    x.vec().*.data()[1].vec().*.data()[0].vec().*.data()[0].vec().*.push(bubby::value::init_str("qux"));
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "MAP");

    var x = bubby::value::init_map();
    defer x.fini();
    x.map().*.insert(bubby::value::init_str("foo"), bubby::value::init_str("a"));
    x.map().*.insert(bubby::value::init_str("bar"), bubby::value::init_str("b"));
    x.map().*.insert(bubby::value::init_str("baz"), bubby::value::init_str("c"));
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_map();
    defer x.fini();
    x.map().*.insert(bubby::value::init_str("foo"), bubby::value::init_map());
    var view = x.map_lookup_view_str("foo");
    var view = view.value();
    view.value.*.map_insert_str("bar", bubby::value::init_map());
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "SET");

    var x = bubby::value::init_set();
    defer x.fini();
    x.set().*.insert(bubby::value::init_str("foo"));
    x.set().*.insert(bubby::value::init_str("bar"));
    x.set().*.insert(bubby::value::init_str("baz"));
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    var x = bubby::value::init_set();
    defer x.fini();
    x.set().*.insert(bubby::value::init_set());
    var tmp = bubby::value::init_set();
    defer tmp.fini();
    var view = x.set().*.lookup(&tmp);
    var view = view.value();
    view.*.set().*.insert(bubby::value::init_str("foo"));
    view.*.set().*.insert(bubby::value::init_str("bar"));
    view.*.set().*.insert(bubby::value::init_set());
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);
    test_value_to_string_to_value(&x);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "PARSE STR");

    var result = bubby::parse_str("\"foo\"");
    var x = result.value().value;
    defer x.fini();
    assert std::str::eq(x.str(), "foo");
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_str("\"\\x5Cfoo\\x09bar\\x0Abaz\\x00\\x22qux\\x22\"");
    var x = result.value().value;
    defer x.fini();
    assert std::str::eq(x.str(), "\\foo\tbar\nbaz\0\"qux\"");
    std::print_format_line(std::out(), "{escaped}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_str("nope");
    std::print_line(std::out(), result.error().error.*.data);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "PARSE VEC");

    var result = bubby::parse_vec("[\"foo\" [({})]]");
    var x = result.value().value;
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_vec("[ \"foo\" \"bar\"   \"baz\" ]");
    var x = result.value().value;
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    # No whitespace between values.
    var result = bubby::parse_vec("[\"foo\"\"bar\"]");
    std::print_line(std::out(), result.error().error.*.data);

    # Invalid whitespace between values.
    var result = bubby::parse_vec("[\"foo\"\x0D\"bar\"]"); # CR separator
    std::print_line(std::out(), result.error().error.*.data);

    # Empty string.
    var result = bubby::parse_vec("");
    std::print_line(std::out(), result.error().error.*.data);

    # Missing opening '['.
    var result = bubby::parse_vec("]");
    std::print_line(std::out(), result.error().error.*.data);

    # Missing closing ']'.
    var result = bubby::parse_vec("[");
    std::print_line(std::out(), result.error().error.*.data);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "PARSE MAP");

    var result = bubby::parse_map("{\"foo\" \"a\" \"bar\" [({})]}");
    var x = result.value().value;
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_map("{ \"foo\" \"a\" \"bar\"   \"b\"   }");
    var x = result.value().value;
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    # Duplicate key.
    var result = bubby::parse_map("{\"foo\" \"a\" \"foo\" \"b\"}");
    std::print_line(std::out(), result.error().error.*.data);

    # No whitespace between values.
    var result = bubby::parse_map("{\"foo\"\"a\"}");
    std::print_line(std::out(), result.error().error.*.data);

    # No whitespace between pairs.
    var result = bubby::parse_map("{\"foo\" \"a\"\"bar\" \"b\"}");
    std::print_line(std::out(), result.error().error.*.data);

    # Invalid whitespace between values.
    var result = bubby::parse_map("{\"foo\"\x0D\"bar\"}"); # CR separator
    std::print_line(std::out(), result.error().error.*.data);

    # Empty string.
    var result = bubby::parse_map("");
    std::print_line(std::out(), result.error().error.*.data);

    # Missing opening '{'.
    var result = bubby::parse_map("}");
    std::print_line(std::out(), result.error().error.*.data);

    # Missing closing '}'.
    var result = bubby::parse_map("{");
    std::print_line(std::out(), result.error().error.*.data);

    std::print(std::out(), "\n");
    std::print_line(std::out(), "PARSE SET");

    var result = bubby::parse_set("(\"foo\" [({})])");
    var x = result.value().value;
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_set("( \"foo\"   \"bar\" )");
    var x = result.value().value;
    defer x.fini();
    std::print_format_line(std::out(), "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&x)]);

    var result = bubby::parse_set("(\"foo\" \"foo\")");
    std::print_line(std::out(), result.error().error.*.data);

    # No whitespace between values.
    var result = bubby::parse_set("(\"foo\"\"bar\")");
    std::print_line(std::out(), result.error().error.*.data);

    # Invalid whitespace between values.
    var result = bubby::parse_map("{\"foo\"\x0D\"bar\"}"); # CR separator
    std::print_line(std::out(), result.error().error.*.data);

    # Empty string.
    var result = bubby::parse_set("");
    std::print_line(std::out(), result.error().error.*.data);

    # Missing opening '('.
    var result = bubby::parse_set(")");
    std::print_line(std::out(), result.error().error.*.data);

    # Missing closing ')'.
    var result = bubby::parse_set("(");
    std::print_line(std::out(), result.error().error.*.data);
}
################################################################################
# STR
# "foo"
# "foo
# bar"
# "\x5Cfoo\x09bar\x0Abaz\x00\x22qux\x22"
# "\x5Cfoo\x09bar\x0Abaz\x00\x22qux\x22"
#
# VEC
# ["foo" "bar" "baz"]
# [["foo" "bar" "baz"] [[["qux"]]]]
#
# MAP
# {"foo" "a" "bar" "b" "baz" "c"}
# {"foo" {"bar" {}}}
#
# SET
# ("foo" "bar" "baz")
# (("foo" "bar" ()))
#
# PARSE STR
# "foo"
# "\x5Cfoo\x09bar\x0Abaz\x00\x22qux\x22"
# parse failure
#
# PARSE VEC
# ["foo" [({})]]
# ["foo" "bar" "baz"]
# parse failure
# parse failure
# parse failure
# parse failure
# parse failure
#
# PARSE MAP
# {"foo" "a" "bar" [({})]}
# {"foo" "a" "bar" "b"}
# duplicate map key
# parse failure
# parse failure
# parse failure
# parse failure
# parse failure
# parse failure
#
# PARSE SET
# ("foo" [({})])
# ("foo" "bar")
# duplicate set element
# parse failure
# parse failure
# parse failure
# parse failure
# parse failure
