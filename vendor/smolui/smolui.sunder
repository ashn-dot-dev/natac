namespace smol;
import "c";
import "std";

import "raylib";

import "microui.sunder";

extern func setup_font(ctx: *mu_Context, font: *Font) void;
extern func handle_input(ctx: *mu_Context) void;
extern func render(ctx: *mu_Context) void;

type id = mu_Id;
type font = mu_Font;
type vec2 = mu_Vec2;
type rect = mu_Rect;
type color = mu_Color;

type command = mu_Command;
type layout = mu_Layout;
type container = mu_Container;
type style = mu_Style;
type context = mu_Context;

let RES_ACTIVE = MU_RES_ACTIVE;
let RES_SUBMIT = MU_RES_SUBMIT;
let RES_CHANGE = MU_RES_CHANGE;

let ICON_CLOSE      = MU_ICON_CLOSE;
let ICON_CHECK      = MU_ICON_CHECK;
let ICON_COLLAPSED  = MU_ICON_COLLAPSED;
let ICON_EXPANDED   = MU_ICON_EXPANDED;

let OPT_ALIGNCENTER = MU_OPT_ALIGNCENTER;
let OPT_ALIGNRIGHT  = MU_OPT_ALIGNRIGHT;
let OPT_NOINTERACT  = MU_OPT_NOINTERACT;
let OPT_NOFRAME     = MU_OPT_NOFRAME;
let OPT_NORESIZE    = MU_OPT_NORESIZE;
let OPT_NOSCROLL    = MU_OPT_NOSCROLL;
let OPT_NOCLOSE     = MU_OPT_NOCLOSE;
let OPT_NOTITLE     = MU_OPT_NOTITLE;
let OPT_NODRAG      = MU_OPT_NODRAG;
let OPT_HOLDFOCUS   = MU_OPT_HOLDFOCUS;
let OPT_AUTOSIZE    = MU_OPT_AUTOSIZE;
let OPT_POPUP       = MU_OPT_POPUP;
let OPT_CLOSED      = MU_OPT_CLOSED;
let OPT_EXPANDED    = MU_OPT_EXPANDED;

struct ui {
    var context: *mu_Context;

    func init(ctx: *mu_Context) ui {
        return (:ui){.context = ctx};
    }

    func handle_input(self: *ui) void {
        smol::handle_input(self.*.context);
    }

    func begin(self: *ui) void {
        mu_begin(self.*.context);
    }

    func end(self: *ui) void {
        mu_end(self.*.context);
    }

    func set_focus(self: *ui, id: smol::id) void {
        mu_set_focus(self.*.context, id);
    }

    func get_id(self: *ui, data: *any, size: usize) smol::id {
        return mu_get_id(self.*.context, data, (:sint)size);
    }

    func push_id(self: *ui, data: *any, size: usize) void {
        mu_push_id(self.*.context, data, (:sint)size);
    }

    func pop_id(self: *ui) void {
        mu_pop_id(self.*.context);
    }

    func push_clip_rect(self: *ui, rect: smol::rect) void {
        mu_push_clip_rect(self.*.context, rect);
    }

    func pop_clip_rect(self: *ui) void {
        mu_pop_clip_rect(self.*.context);
    }

    func get_clip_rect(self: *ui) smol::rect {
        return mu_get_clip_rect(self.*.context);
    }

    func check_clip(self: *ui, rect: smol::rect) sint {
        return mu_check_clip(self.*.context, rect);
    }

    func get_current_container(self: *ui) *smol::container {
        return mu_get_current_container(self.*.context);
    }

    func get_container(self: *ui, name: []byte) *smol::container {
        var s = std::string::init_from_str(name);
        defer s.fini();
        return mu_get_container(self.*.context, s.cstr());
    }

    func bring_to_front(self: *ui, container: *smol::container) void {
        mu_bring_to_front(self.*.context, container);
    }

    func draw_rect(self: *ui, rect: smol::rect, color: smol::color) void {
        mu_draw_rect(self.*.context, rect, color);
    }

    func draw_box(self: *ui, rect: smol::rect, color: smol::color) void {
        mu_draw_box(self.*.context, rect, color);
    }

    func draw_text(self: *ui, font: smol::font, str: []byte, position: smol::vec2, color: smol::color) void {
        mu_draw_text(self.*.context, font, startof(str), (:sint)countof(str), position, color);
    }

    func draw_icon(self: *ui, id: sint, rect: smol::rect, color: smol::color) void {
        mu_draw_icon(self.*.context, id, rect, color);
    }

    func layout_row(self: *ui, widths: []sint, height: sint) void {
        mu_layout_row(self.*.context, (:sint)countof(widths), startof(widths), height);
    }

    func layout_width(self: *ui, width: sint) void {
        mu_layout_width(self.*.context, width);
    }

    func layout_height(self: *ui, height: sint) void {
        mu_layout_height(self.*.context, height);
    }

    func layout_begin_column(self: *ui) void {
        mu_layout_begin_column(self.*.context);
    }

    func layout_end_column(self: *ui) void {
        mu_layout_end_column(self.*.context);
    }

    func layout_set_next(self: *ui, rect: smol::rect, relative: bool) void {
        mu_layout_set_next(self.*.context, rect, (:sint)relative);
    }

    func layout_next(self: *ui) smol::rect {
        return mu_layout_next(self.*.context);
    }

    func draw_control_frame(self: *ui, id: smol::id, rect: smol::rect, colorid: sint, opt: sint) void {
        mu_draw_control_frame(self.*.context, id, rect, colorid, opt);
    }

    func draw_control_text(self: *ui, text: []char, rect: smol::rect, colorid: sint, opt: sint) void {
        var s = std::string::init_from_str(text);
        defer s.fini();
        mu_draw_control_text(self.*.context, s.cstr(), rect, colorid, opt);
    }

    func mouse_over(self: *ui, rect: smol::rect) sint {
        return mu_mouse_over(self.*.context, rect);
    }

    func update_control(self: *ui, id: smol::id, rect: smol::rect, opt: sint) void {
        mu_update_control(self.*.context, id, rect, opt);
    }

    func text(self: *ui, text: []byte) void {
        var s = std::string::init_from_str(text);
        defer s.fini();
        mu_text(self.*.context, s.cstr());
    }

    func label(self: *ui, text: []byte) void {
        var s = std::string::init_from_str(text);
        defer s.fini();
        mu_label(self.*.context, s.cstr());
    }

    func button(self: *ui, text: []byte) bool {
        var s = std::string::init_from_str(text);
        defer s.fini();
        return mu_button(self.*.context, s.cstr()) != 0;
    }

    func button_ex(self: *ui, text: []byte, icon: sint, opt: sint) bool {
        var s = std::string::init_from_str(text);
        defer s.fini();
        return mu_button_ex(self.*.context, s.cstr(), icon, opt) != 0;
    }

    func checkbox(self: *ui, text: []byte, state: *bool) bool {
        var s = std::string::init_from_str(text);
        defer s.fini();
        var res = mu_checkbox(self.*.context, s.cstr(), state) != 0;
        return res;
    }

    func textbox_string(self: *ui, string: *std::string) sint {
        return self.*.textbox_string_ex(string, 0);
    }

    func textbox_string_ex(self: *ui, string: *std::string, opt: sint) sint {
        # The address of the buffer may change during resize, so we use the
        # address of the std::string as the ID rather than the hashed value of
        # the buffer address that mu_textbox_ex would normally use.
        var id = (:mu_Id)(:usize)string;
        var rect = mu_layout_next(self.*.context);
        let INPUT_TEXT_SIZE = 32u;
        string.*.reserve(string.*.count() + INPUT_TEXT_SIZE);
        var res = mu_textbox_raw(self.*.context, string.*.start(), (:sint)(string.*.capacity() + countof("\0")), id, rect, opt);
        string.*.resize(std::cstr::count(string.*.cstr()));
        return res;
    }

    func textbox_buffer(self: *ui, buffer: []byte) sint {
        return self.*.textbox_buffer_ex(buffer, 0);
    }

    func textbox_buffer_ex(self: *ui, buffer: []byte, opt: sint) sint {
        return mu_textbox_ex(self.*.context, startof(buffer), (:sint)countof(buffer), opt);
    }

    func slider(self: *ui, value: *float, lo: float, hi: float) bool {
        return mu_slider(self.*.context, value, lo, hi) != 0;
    }

    func slider_ex(self: *ui, value: *float, lo: float, hi: float, step: float, fmt: *char, opt: sint) bool {
        return mu_slider_ex(self.*.context, value, lo, hi, step, fmt, opt) != 0;
    }

    func number(self: *ui, value: *float, step: float) bool {
        return mu_number(self.*.context, value, step) != 0;
    }

    func header(self: *ui, text: []byte) bool {
        var s = std::string::init_from_str(text);
        defer s.fini();
        return mu_header(self.*.context, s.cstr()) != 0;
    }

    func header_ex(self: *ui, text: []byte, opt: sint) bool {
        var s = std::string::init_from_str(text);
        defer s.fini();
        return mu_header_ex(self.*.context, s.cstr(), opt) != 0;
    }

    func begin_treenode(self: *ui, text: []byte) bool {
        var s = std::string::init_from_str(text);
        defer s.fini();
        return mu_begin_treenode(self.*.context, s.cstr()) != 0;
    }

    func begin_treenode_ex(self: *ui, text: []byte, opt: sint) bool {
        var s = std::string::init_from_str(text);
        defer s.fini();
        return mu_begin_treenode_ex(self.*.context, s.cstr(), opt) != 0;
    }

    func end_treenode(self: *ui) void {
        mu_end_treenode(self.*.context);
    }

    func begin_window(self: *ui, title: []byte, rect: rect) bool {
        var s = std::string::init_from_str(title);
        defer s.fini();
        return mu_begin_window(self.*.context, s.cstr(), rect) != 0;
    }

    func begin_window_ex(self: *ui, title: []byte, rect: rect, opt: sint) bool {
        var s = std::string::init_from_str(title);
        defer s.fini();
        return mu_begin_window_ex(self.*.context, s.cstr(), rect, opt) != 0;
    }

    func end_window(self: *ui) void {
        mu_end_window(self.*.context);
    }

    func open_popup(self: *ui, name: []byte) void {
        var s = std::string::init_from_str(name);
        defer s.fini();
        mu_open_popup(self.*.context, s.cstr());
    }

    func begin_popup(self: *ui, name: []byte) bool {
        var s = std::string::init_from_str(name);
        defer s.fini();
        return mu_begin_popup(self.*.context, s.cstr()) != 0;
    }

    func end_popup(self: *ui) void {
        mu_end_popup(self.*.context);
    }

    func begin_panel(self: *ui, name: []byte) void {
        var s = std::string::init_from_str(name);
        defer s.fini();
        mu_begin_panel(self.*.context, s.cstr());
    }

    func begin_panel_ex(self: *ui, name: []byte, opt: sint) void {
        var s = std::string::init_from_str(name);
        defer s.fini();
        mu_begin_panel_ex(self.*.context, s.cstr(), opt);
    }

    func end_panel(self: *ui) void {
        mu_end_panel(self.*.context);
    }

    func render(self: *ui) void {
        smol::render(self.*.context);
    }
}

extend smol::vec2 func init(x: sint, y: sint) smol::vec2 {
    return mu_vec2(x, y);
}

extend smol::rect func init(x: sint, y: sint, w: sint, h: sint) smol::rect {
    return mu_rect(x, y, w, h);
}

extend smol::color func init(r: sint, g: sint, b: sint, a: sint) smol::color {
    return mu_color(r, g, b, a);
}
