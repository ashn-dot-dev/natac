import "c";
import "std";

import "shared.sunder";

struct server_state {
    var tick: usize;
    var board: board;

    func init() server_state {
        return (:server_state){
            .tick = 0,
            .board = board::init_starter_map_for_beginners(),
        };
    }

    func fini(self: *server_state) void {
        self.*.board.fini();
    }

    func place_road(self: *server_state, road: road) void {
        insert_road(&self.*.board.roads, road);
    }

    func process_place_road(self: *server_state, road: road, sender: *message_sender[[server_message]]) void {
        self.*.place_road(road);
        var message = server_message::init_accepted("built road");
        defer message.fini();
        sender.*.send(&message);
    }

    func remove_road(self: *server_state, edge: edge) void {
        self.*.board.roads.remove(edge);
    }

    func process_remove_road(self: *server_state, edge: edge, sender: *message_sender[[server_message]]) void {
        self.*.remove_road(edge);
        var message = server_message::init_accepted("removed road");
        defer message.fini();
        sender.*.send(&message);
    }

    func place_town(self: *server_state, town: town) void {
        insert_town(&self.*.board.towns, town);
    }

    func process_place_town(self: *server_state, town: town, sender: *message_sender[[server_message]]) void {
        self.*.place_town(town);
        var message = server_message::init_accepted("built town");
        defer message.fini();
        sender.*.send(&message);
    }

    func remove_town(self: *server_state, node: node) void {
        self.*.board.towns.remove(node);
    }

    func process_remove_town(self: *server_state, node: node, sender: *message_sender[[server_message]]) void {
        self.*.remove_town(node);
        var message = server_message::init_accepted("removed town");
        defer message.fini();
        sender.*.send(&message);
    }

    func update_from_client_message(self: *server_state, message: *client_message, sender: *message_sender[[server_message]]) void {
        switch message.*.kind {
        client_message::BUILD_ROAD {
            self.*.process_place_road(message.*.data.build_road, sender);
        }
        client_message::BUILD_TOWN {
            self.*.process_place_town(message.*.data.build_town, sender);
        }
        client_message::REMOVE_ROAD {
            self.*.process_remove_road(message.*.data.remove_road, sender);
        }
        client_message::REMOVE_TOWN {
            self.*.process_remove_town(message.*.data.remove_town, sender);
        }
        }
    }
}

func server_update(sstate: *server_state, sender: *message_sender[[server_message]]) void {
    # The state of the board changes relatively infrequently, so it is not
    # necessary to serialize and send the entire board state every game tick.
    if sstate.*.tick % 4 == 0 {
        var message = server_message::init_board(&sstate.*.board);
        defer message.fini();
        sender.*.send(&message);
    }

    sstate.*.tick = sstate.*.tick +% 1;
}
