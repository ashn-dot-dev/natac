import "c";
import "std";

import "shared.sunder";

struct server_state {
    var ticks: usize;
    var board: board;

    func init() server_state {
        return (:server_state){
            .ticks = 0,
            .board = board::init_starter_map_for_beginners(),
        };
    }

    func fini(self: *server_state) void {
        self.*.board.fini();
    }

    func place_road(self: *server_state, road: road) void {
        insert_road(&self.*.board.roads, road);
    }

    func process_place_road(self: *server_state, road: road, sender: *message_sender[[server_message]]) void {
        var existing = self.*.board.roads.lookup(road.edge);
        if existing.is_value() {
            var message = server_message::init_rejected("cannot build road (road exists at location)");
            defer message.fini();
            sender.*.send(&message);
            return;
        }

        var adjacent_edges = adjacent_edges_to_edge(road.edge, &self.*.board.edges, &self.*.board.nodes);
        defer adjacent_edges.fini();
        var adjacent_roads = std::hash_set[[::road]]::init();
        defer adjacent_roads.fini();
        var iter = std::hash_set_iterator[[edge]]::init(&adjacent_edges);
        for iter.advance() {
            var adjacent = self.*.board.roads.lookup(*iter.current());
            if adjacent.is_empty() {
                continue;
            }
            var adjacent = adjacent.value();
            if adjacent.player != road.player {
                continue;
            }
            adjacent_roads.insert(adjacent);
        }
        if adjacent_roads.count() == 0 {
            var message = server_message::init_rejected("cannot build road (no adjacent road or town)");
            defer message.fini();
            sender.*.send(&message);
            return;
        }

        var unobstructed_road_count = 0u;
        var iter = std::hash_set_iterator[[::road]]::init(&adjacent_roads);
        for iter.advance() {
            var a = adjacent_nodes_to_edge(road.edge, &self.*.board.nodes);
            defer a.fini();
            var b = adjacent_nodes_to_edge(iter.current().*.edge, &self.*.board.nodes);
            defer b.fini();
            var i = std::hash_set[[node]]::init_intersection(&a, &b);
            defer i.fini();
            assert i.count() == 1;
            var iter = std::hash_set_iterator[[node]]::init(&i);
            iter.advance();
            var town = self.*.board.towns.lookup(*iter.current());
            if town.is_empty() {
                # No town between the two road pieces.
                unobstructed_road_count = unobstructed_road_count + 1;
                continue;
            }
            var town = town.value();
            if town.player == road.player {
                # Town between the two road pieces belongs to the player
                # placing the road.
                unobstructed_road_count = unobstructed_road_count + 1;
                continue;
            }
        }
        if unobstructed_road_count == 0 {
            var message = server_message::init_rejected("cannot build road (road is obstructed by town)");
            defer message.fini();
            sender.*.send(&message);
            return;
        }

        var player_road_count = 0u;
        var iter = std::hash_map_iterator[[edge, ::road]]::init(&self.*.board.roads);
        for iter.advance() {
            if iter.current().*.value.*.player == road.player {
                player_road_count = player_road_count + 1;
            }
        }
        if player_road_count >= 15 {
            var message = server_message::init_rejected("cannot build road (all roads placed)");
            defer message.fini();
            sender.*.send(&message);
            return;
        }

        self.*.place_road(road);
        var message = server_message::init_accepted("built road");
        defer message.fini();
        sender.*.send(&message);
    }

    func remove_road(self: *server_state, edge: edge) void {
        self.*.board.roads.remove(edge);
    }

    func process_remove_road(self: *server_state, edge: edge, sender: *message_sender[[server_message]]) void {
        self.*.remove_road(edge);
        var message = server_message::init_accepted("removed road");
        defer message.fini();
        sender.*.send(&message);
    }

    func place_town(self: *server_state, town: town) void {
        insert_town(&self.*.board.towns, town);
    }

    func process_place_town(self: *server_state, town: town, sender: *message_sender[[server_message]]) void {
        var existing = self.*.board.towns.lookup(town.node);
        if existing.is_value() {
            var existing = existing.value();
            # Special case for upgrading a settlement to a city.
            if not (existing.player == town.player and existing.kind == ::town::SETTLEMENT and town.kind == ::town::CITY) {
                var message = server_message::init_rejected("cannot build town (town exists at location)");
                defer message.fini();
                sender.*.send(&message);
                return;
            }
        }

        var adjacent_nodes = adjacent_nodes_to_node(town.node, &self.*.board.nodes);
        defer adjacent_nodes.fini();
        var adjacent_town_count = 0u;
        var iter = std::hash_set_iterator[[node]]::init(&adjacent_nodes);
        for iter.advance() {
            if self.*.board.towns.contains(*iter.current()) {
                adjacent_town_count = adjacent_town_count + 1;
            }
        }
        if adjacent_town_count != 0 {
            var message = server_message::init_rejected("cannot build town (adjacent town)");
            defer message.fini();
            sender.*.send(&message);
            return;
        }

        var adjacent_edges = adjacent_edges_to_node(town.node, &self.*.board.edges);
        defer adjacent_edges.fini();
        var is_road_adjacent = false;
        var iter = std::hash_set_iterator[[edge]]::init(&adjacent_edges);
        for iter.advance() {
            var adjacent = self.*.board.roads.lookup(*iter.current());
            if adjacent.is_empty() {
                continue;
            }
            var adjacent = adjacent.value();
            if adjacent.player != town.player {
                continue;
            }

            is_road_adjacent = true;
        }
        if not is_road_adjacent {
            var message = server_message::init_rejected("cannot build town (no adjacent road)");
            defer message.fini();
            sender.*.send(&message);
            return;
        }

        var player_town_count = 0u;
        var iter = std::hash_map_iterator[[node, ::town]]::init(&self.*.board.towns);
        for iter.advance() {
            if iter.current().*.value.*.player == town.player and iter.current().*.value.*.kind == town.kind {
                player_town_count = player_town_count + 1;
            }
        }
        if town.kind == ::town::SETTLEMENT and player_town_count >= 5 {
            var message = server_message::init_rejected("cannot build town (all settlements placed)");
            defer message.fini();
            sender.*.send(&message);
            return;
        }
        if town.kind == ::town::CITY and player_town_count >= 4 {
            var message = server_message::init_rejected("cannot build town (all cities placed)");
            defer message.fini();
            sender.*.send(&message);
            return;
        }

        self.*.place_town(town);
        var message = server_message::init_accepted("built town");
        defer message.fini();
        sender.*.send(&message);
    }

    func remove_town(self: *server_state, node: node) void {
        self.*.board.towns.remove(node);
    }

    func process_remove_town(self: *server_state, node: node, sender: *message_sender[[server_message]]) void {
        self.*.remove_town(node);
        var message = server_message::init_accepted("removed town");
        defer message.fini();
        sender.*.send(&message);
    }

    func move_robber(self: *server_state, hex: hex) void {
        self.*.board.robber = hex;
    }

    func process_move_robber(self: *server_state, hex: hex, sender: *message_sender[[server_message]]) void {
        if std::eq[[::hex]](&hex, &self.*.board.robber) {
            var message = server_message::init_rejected("cannot move robber (robber already at location)");
            defer message.fini();
            sender.*.send(&message);
            return;
        }

        var tile = self.*.board.tiles.lookup(hex);
        if tile.is_empty() {
            var message = server_message::init_rejected("cannot move robber (invalid location)");
            defer message.fini();
            sender.*.send(&message);
            return;
        }

        var tile = tile.value();
        if tile.kind == ::tile::OCEAN {
            var message = server_message::init_rejected("cannot move robber (tile is ocean)");
            defer message.fini();
            sender.*.send(&message);
            return;
        }

        self.*.move_robber(hex);
        var message = server_message::init_accepted("moved robber");
        defer message.fini();
        sender.*.send(&message);
    }

    func update_from_client_message(self: *server_state, message: *client_message, sender: *message_sender[[server_message]]) void {
        switch message.*.kind {
        client_message::BUILD_ROAD {
            self.*.process_place_road(message.*.data.build_road, sender);
        }
        client_message::BUILD_TOWN {
            self.*.process_place_town(message.*.data.build_town, sender);
        }
        client_message::REMOVE_ROAD {
            self.*.process_remove_road(message.*.data.remove_road, sender);
        }
        client_message::REMOVE_TOWN {
            self.*.process_remove_town(message.*.data.remove_town, sender);
        }
        client_message::MOVE_ROBBER {
            self.*.process_move_robber(message.*.data.move_robber, sender);
        }
        }
    }
}

func server_update(sstate: *server_state, sender: *message_sender[[server_message]]) void {
    # The state of the board changes relatively infrequently, so it is not
    # necessary to serialize and send the entire board state every game tick.
    if sstate.*.ticks % 4 == 0 {
        var message = server_message::init_board(&sstate.*.board);
        defer message.fini();
        sender.*.send(&message);
    }

    sstate.*.ticks = sstate.*.ticks +% 1;
}
