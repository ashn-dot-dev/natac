import "sys";

var zero_sized_variable: [0]u16 = (:[0]u16)[];
let zero_sized_constant: [0]u16 = (:[0]u16)[];

let arr0: [3u]ssize = (:[3u]ssize)[1s, 3s, 5s];
var arr1: [3u]ssize = (:[3u]ssize)[1s, 3s, 5s];

func dump_arr_of_3_ssize(arr: [3u]ssize) void {
    sys::dump[[[3]ssize]](arr);
}

let x0: ssize = 123s;
let x1: ssize = 456s;
let x2: ssize = 789s;
let array_of_pointers: [3u]*ssize = (:[3u]*ssize)[&x0, &x1, &x2];
let array_of_array_of_pointers: [2u][3u]*ssize =
    (:[2u][3u]*ssize)[
        (:[3u]*ssize)[&x0, &x1, &x2],
        (:[3u]*ssize)[&x2, &x1, &x0]
    ];

let array_of_zero_sized_objects: [2u][0u]void =
    (:[2u][0u]void)[
        (:[0u]void)[],
        (:[0u]void)[]
    ];

func main() void {
    sys::dump[[[0]u16]](zero_sized_variable);
    sys::dump[[[0]u16]](zero_sized_constant);

    let arr2: [3u]ssize = (:[3u]ssize)[1s, 3s, 5s];
    var arr3: [3u]ssize = (:[3u]ssize)[1s, 3s, 5s];

    sys::dump[[[3]ssize]](arr0);
    sys::dump[[[3]ssize]](arr1);
    sys::dump[[[3]ssize]](arr2);
    sys::dump[[[3]ssize]](arr3);

    let arr4: [5u]bool = (:[5u]bool)[true, true, false, true, false];
    var arr5: [5u]bool = (:[5u]bool)[true, true, false, true, false];
    sys::dump[[[5]bool]](arr4);
    sys::dump[[[5]bool]](arr5);

    let arr6: [0u]ssize = (:[0u]ssize)[];
    var arr7: [0u]ssize = (:[0u]ssize)[];
    sys::dump[[[0]ssize]](arr6);
    sys::dump[[[0]ssize]](arr7);

    dump_arr_of_3_ssize(arr0);
    dump_arr_of_3_ssize(arr1);
    dump_arr_of_3_ssize(arr2);
    dump_arr_of_3_ssize(arr3);

    let arr8: [2u][3u]bool = (:[2u][3u]bool)[
        (:[3u]bool)[true, false, true],
        (:[3u]bool)[false, true, false]
    ];
    var arr9: [2u][3u]bool = (:[2u][3u]bool)[
        (:[3u]bool)[true, false, true],
        (:[3u]bool)[false, true, false]
    ];
    sys::dump[[[2][3]bool]](arr8);
    sys::dump[[[2][3]bool]](arr9);

    let arr10: [1u][1u][0u]ssize = (:[1u][1u][0u]ssize)[
        (:[1u][0u]ssize)[
            (:[0u]ssize)[]
        ]
    ];
    let arr11: [1u][1u][0u]ssize = (:[1u][1u][0u]ssize)[
        (:[1u][0u]ssize)[
            (:[0u]ssize)[]
        ]
    ];
    sys::dump[[[1][1][0]ssize]](arr10);
    sys::dump[[[1][1][0]ssize]](arr11);

    let arr12: [1u][1u][1u]usize = (:[1u][1u][1u]usize)[
        (:[1u][1u]usize)[
            (:[1u]usize)[0xFFFFFFFFFFFFFFFFu]
        ]
    ];
    var arr13: [1u][1u][1u]usize = (:[1u][1u][1u]usize)[
        (:[1u][1u]usize)[
            (:[1u]usize)[0xFFFFFFFFFFFFFFFFu]
        ]
    ];
    sys::dump[[[1][1][1]usize]](arr12);
    sys::dump[[[1][1][1]usize]](arr13);

    sys::dump[[ssize]](*array_of_pointers[2u]);
    sys::dump[[ssize]](*array_of_array_of_pointers[0u][2u]);

    sys::dump[[[0]void]](array_of_zero_sized_objects[0u]);
    sys::dump[[[0]void]](array_of_zero_sized_objects[1u]);
    sys::dump[[*[0]void]](&array_of_zero_sized_objects[0u]);

    # Array sizes can be used in constant expressions, even if a symbol for the
    # array is a non-constant expression.
    var x = (:[3]ssize)[0...];
    var _ = (:[countof(x)]ssize)[0...];
    let _ = (:[countof(x)]ssize)[0...];

    # Check that array lists can contain a final comma before the closing
    # brace.
    (:[3]u16)[
        0xAAAA,
        0xBBBB,
        0xCCCC,
    ];
    (:[5]u16)[
        0xAAAA,
        0xBBBB,
        0xCCCC,
        0xDDDD...
    ];
}

################################################################################
#
#
# 01 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00
# 01 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00
# 01 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00
# 01 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00
# 01 01 00 01 00
# 01 01 00 01 00
#
#
# 01 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00
# 01 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00
# 01 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00
# 01 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00
# 01 00 01 00 01 00
# 01 00 01 00 01 00
#
#
# FF FF FF FF FF FF FF FF
# FF FF FF FF FF FF FF FF
# 15 03 00 00 00 00 00 00
# 15 03 00 00 00 00 00 00
#
#
# 00 00 00 00 00 00 00 00
