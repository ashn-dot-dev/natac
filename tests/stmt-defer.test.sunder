import "sys";

func simple_defer() void {
    defer {
        sys::dump[[u8]](0xFFu8);
    }

    var condition = false;
    defer {
        if condition {
            sys::dump[[u8]](0xEEu8);
        }
    }
    condition = true;

    defer {
        sys::dump[[u8]](0xDDu8);
    }

    defer {
        defer {
            defer {
                sys::dump[[u8]](0xCCu8);
            }
            sys::dump[[u8]](0xBBu8);
        }
        sys::dump[[u8]](0xAAu8);
    }

    return;

    defer {
        0xDEADBEEFu32;
    }
}

func for_range_loop() void {
    defer {
        sys::dump[[u32]](0x22222222u32);
    }

    for i in 1:999 {
        defer {
            sys::dump[[u32]](0x11111111u32);
        }

        if i == 1 {
            defer {
                sys::dump[[u16]](0xABCu16);
            }
            sys::dump[[u16]](0x123u16);
            continue;
        }
        if i == 2 {
            defer {
                sys::dump[[u16]](0xDEFu16);
            }
            sys::dump[[u16]](0x456u16);
            break;
        }

        defer {
            sys::dump[[u32]](0xDEADBEEFu32);
        }
    }
}

func for_expr_loop() void {
    defer {
        sys::dump[[u32]](0x44444444u32);
    }

    var x = 1u;
    for true {
        defer {
            sys::dump[[u32]](0x33333333u32);
        }

        if x == 1 {
            defer {
                sys::dump[[u16]](0xABCu16);
            }
            sys::dump[[u16]](0x123u16);
            x = x + 1;
            continue;
        }
        if x == 2 {
            defer {
                sys::dump[[u16]](0xDEFu16);
            }
            sys::dump[[u16]](0x456u16);
            break;
        }

        defer {
            sys::dump[[u32]](0xDEADBEEFu32);
        }
    }
}

func return_override() bool {
    defer {
        # Second return within a defer statement that will override the initial
        # return value.
        return true;
    }

    return false;
}

func deeply_nested() void {
    defer {
        defer {
            defer {
                for true {
                    for _ in 0:999 {
                        defer {
                            defer {
                                defer {
                                    sys::dump[[u32]](0xCAFEF00Du32);
                                    return;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

func dump_u8(value: u8) void {
    sys::dump[[u8]](value);
}

func defer_expr() void {
    defer dump_u8(0xFF);
    defer dump_u8(0xEE);
    defer {
        defer {
            defer dump_u8(0xDD);
        }
        defer dump_u8(0xCC);
        defer dump_u8(0xBB);
    }
    defer dump_u8(0xAA);
}

func defer_expr_return() void {
    defer dump_u8(0xFF);
    defer dump_u8(0xEE);
    defer {
        defer dump_u8(0xDD);
    }
    return;
    defer dump_u8(0xCC);
}

func main() void {
    simple_defer();
    for_range_loop();
    for_expr_loop();
    sys::dump[[bool]](return_override());
    deeply_nested();
    defer_expr();
    defer_expr_return();
}
################################################################################
# AA
# BB
# CC
# DD
# EE
# FF
# 23 01
# BC 0A
# 11 11 11 11
# 56 04
# EF 0D
# 11 11 11 11
# 22 22 22 22
# 23 01
# BC 0A
# 33 33 33 33
# 56 04
# EF 0D
# 33 33 33 33
# 44 44 44 44
# 01
# 0D F0 FE CA
# AA
# BB
# CC
# DD
# EE
# FF
# DD
# EE
# FF
