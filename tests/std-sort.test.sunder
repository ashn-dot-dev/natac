import "std";

func test[[T]](slice: []T) void {
    std::sort[[T]](slice);
    for i in 1:countof(slice) {
        var prev = i - 1;
        if std::lt[[T]](&slice[i], &slice[prev]) {
            std::print_format_line(
                std::err(),
                "slice[{}] < slice[{}] => {} < {}",
                (:[]std::formatter)[
                    std::formatter::init[[usize]](&i),
                    std::formatter::init[[usize]](&prev),
                    std::formatter::init[[T]](&slice[i]),
                    std::formatter::init[[T]](&slice[prev])]);
        }
    }
}

func main() void {
    test[[ssize]]((:[]ssize)[]); # zero-elements

    test[[ssize]]((:[]ssize)[3]); # single-element

    test[[ssize]]((:[]ssize)[1, 2, 3, 4, 5]); # ascending
    test[[ssize]]((:[]ssize)[5, 4, 3, 2, 1]); # descending
    test[[ssize]]((:[]ssize)[4, 1, 3, 5, 2]); # random
    test[[ssize]]((:[]ssize)[2, 3, 1, 4, 5]); # nearly sorted
    test[[ssize]]((:[]ssize)[1, 1, 1, 2, 2]); # repeats
    test[[ssize]]((:[]ssize)[2, 2, 1, 1, 1]); # repeats
    test[[ssize]]((:[]ssize)[1, 2, 1, 2, 1]); # repeats
    test[[ssize]]((:[]ssize)[3, 3, 3, 3, 3]); # all same

    test[[ssize]]((:[]ssize)[1, 6, 2, 5, 3, 4]); # ascending
    test[[ssize]]((:[]ssize)[6, 5, 4, 3, 2, 1]); # descending
    test[[ssize]]((:[]ssize)[4, 1, 5, 2, 3, 6]); # random
    test[[ssize]]((:[]ssize)[2, 3, 1, 4, 5, 6]); # nearly sorted
    test[[ssize]]((:[]ssize)[2, 3, 4, 1, 5, 6]); # nearly sorted
    test[[ssize]]((:[]ssize)[1, 1, 1, 2, 2, 2]); # repeats
    test[[ssize]]((:[]ssize)[2, 2, 2, 1, 1, 1]); # repeats
    test[[ssize]]((:[]ssize)[1, 2, 1, 2, 1, 2]); # repeats
    test[[ssize]]((:[]ssize)[3, 3, 3, 3, 3, 3]); # all same

    # Generated with Python3
    # >>> list([random.randint(-3, 3) for x in range(100)])
    test[[ssize]]((:[]ssize)[-2, 1, -1, 0, -2, 3, 0, 3, -1, -3, 3, -3, -3, 3, 1, 0, -1, 1, -3, 2, 2, 1, 2, -2, -1, -1, 1, 1, 3, 2, -1, -3, 2, -2, -1, -1, -2, 0, -2, 0, -3, 0, -3, 3, 3, 3, -2, -2, 2, -3, 1, -2, 3, -3, 0, 1, -2, 0, 1, 2, 3, 3, 0, 2, 1, -1, -3, 3, 3, -2, -3, 0, -3, 1, -1, 2, -3, -2, 2, -3, -2, 3, 2, 1, -3, 2, -3, 3, 0, 3, 2, 0, 1, 0, -1, 2, -2, 2, 2, 0]);
    test[[ssize]]((:[]ssize)[0, 2, 2, -3, -3, -3, -2, -2, 2, 3, 2, -2, 3, 2, 2, 1, -1, -1, 1, 0, 2, -1, -1, 0, 3, -2, 1, 1, 3, 2, 1, -3, 3, -3, 1, 1, 2, -2, 1, 3, 1, 2, 1, -3, 0, 2, -2, 2, 3, 3, 1, 0, -3, -1, -1, 3, 3, 0, -1, 2, 2, -1, 3, 1, 3, 1, 1, 2, 3, -1, -2, -2, -3, -1, -3, 1, -3, 0, 3, -1, 3, 0, 2, -2, -3, 2, 1, -3, -2, 1, 0, -2, 1, 2, 2, -3, 3, 0, 1, 3]);
    test[[ssize]]((:[]ssize)[-2, 2, 3, 1, 0, -1, -1, 1, 2, 3, 0, 3, 3, 2, -1, -1, 2, 0, -2, -2, -3, 2, 2, 3, -3, 2, 1, 2, 3, -2, -1, -3, -2, -2, 3, 2, -2, 2, 2, 0, 2, 3, -2, 3, 1, -2, 1, 2, -2, 3, 0, 1, 2, -3, 0, -2, -1, -1, 2, 1, 2, 0, -2, -3, 0, 2, 3, 0, 0, -1, -3, 2, 0, 3, 0, 2, -3, -1, 0, 0, -3, -3, -3, 2, -1, -1, -1, 3, -2, 2, 1, 2, 2, 1, 0, 2, 3, 3, 1, 2]);
    # >>> list([random.randint(-10000, 10000) for x in range(100)])
    test[[ssize]]((:[]ssize)[-1229, -7144, 3344, -1266, -6471, -8750, 2423, 7570, 8426, 885, 1167, -8300, -4769, -5575, 1049, 8381, 937, -1967, -4634, -9946, 4295, -7130, 9582, 2373, -7711, -9784, 336, 4690, -6657, -8562, -6961, -5342, -5864, -9305, -439, 4111, 8789, 5627, -1306, 5377, -8796, -3, 1254, 7094, 5825, -3222, 9952, 7271, 8507, 330, -9589, 3049, 6801, 4233, 7646, 9546, 5929, 7059, 3746, 2272, 6713, -8957, -4054, -7294, 5954, -1419, -4426, 974, 1040, 8160, 2818, -7599, 4967, 2702, 8781, 1013, -9466, -3805, 9208, -7112, 1911, -9580, 1531, -2492, 3294, 7432, 6417, -8043, -573, 6212, -2353, 7831, 5853, -4181, -4962, 7576, 4565, 2405, 5115, -8554]);
    test[[ssize]]((:[]ssize)[-8554, -9668, -5586, 4953, -3670, -9312, -1600, 1535, -1090, 4230, 3774, -9989, -6441, -7949, 6722, 1634, -7091, -7284, 4195, -9720, 7557, 2368, -7593, 7910, 3245, -9046, 566, -1398, 5483, -8918, 8402, 971, 3568, 1415, -9221, -4631, 3731, -7895, -5282, 2193, -2301, -7432, -8128, 6996, 2688, 7613, 32, -5212, -459, 2755, 2074, -5856, 7528, 1066, 6944, -6083, -4535, 9310, 2656, 4161, -7967, -5544, 4900, -9325, 1453, 4736, 4783, -45, 4057, -9075, -4804, 7091, 644, 6935, 6866, 8237, -5499, 1258, 6388, -6567, 7873, 2091, -2631, 8683, 1143, -6958, -1096, 6590, -2030, -3340, 553, -1332, 3047, -8591, 6401, -7367, -3542, 6552, -3463, -9438]);
    test[[ssize]]((:[]ssize)[-3638, -1210, 8501, -2433, -7212, 9664, 388, -7256, 1178, 8170, 7618, -5627, 7504, -5562, 5858, 6131, 3053, -9076, -1584, 8938, 5929, 1158, 2970, -2656, 6425, -5868, 9980, -9805, 9700, 9960, 6202, 1252, 9156, -5992, -8282, 1817, 5098, 1856, 3787, 338, 1752, -2903, 4714, 1240, -3694, -4080, 2529, -7954, 3589, 2298, 6399, -1301, -4270, 8318, 2334, 2075, -7734, -304, -5992, -1303, 6476, 9839, 558, -8201, 2471, -8310, 9201, 2727, -219, -6479, 5255, 8793, 639, -2049, 4595, -1287, 4392, 8440, 8727, 1273, -1860, 4925, 6416, 8840, -989, 1048, -8402, -4030, -5959, -9348, 4028, 6267, -5679, 5640, 7534, -8599, 5411, 7757, -5362, 677]);

    test[[[]byte]]((:[][]byte)["apple", "banana", "carrot"]);
    test[[[]byte]]((:[][]byte)["carrot", "banana", "apple"]);
}
