import "sys";

var v: usize = 0xCAFED00DCAFED00Du;
let w: usize = 0xCAFEBABECAFEBABEu;
let addressof_v: *usize = &v;
let addressof_w: *usize = &w;

let a: [3u]byte = (:[3u]byte)[0xAAy, 0xBBy, 0xCCy];
let addressof_a: *byte = &a[1u];

let b: [0u]ssize = (:[0u]ssize)[]; # zero-sized object
let addressof_b: *[0u]ssize = &b;

func main() void {
    var x: usize = 0xBADCAFE01DC0FFEEu;
    var addressof_x: *usize = &x;
    var dereference_addressof_x: usize = *addressof_x;

    sys::dump[[usize]](x);
    sys::dump[[usize]](*&x);
    sys::dump[[usize]](*&*&x);
    sys::dump[[usize]](*&*&*&*&x);
    sys::dump[[usize]](dereference_addressof_x);

    var y: [2u][3u]ssize = (:[2u][3u]ssize)[
        (:[3u]ssize)[1s, 3s, 5s],
        (:[3u]ssize)[2s, 4s, 6s]
    ];
    sys::dump[[ssize]](y[1u][2u]);
    sys::dump[[ssize]](*&y[1u][2u]);

    let z: usize = 0xDEADBEEFDEADBEEFu;
    var addressof_z: *usize = &z;
    var dereference_addressof_z: usize = *addressof_z;
    sys::dump[[usize]](z);
    sys::dump[[usize]](*&z);
    sys::dump[[usize]](*&*&z);
    sys::dump[[usize]](*&*&*&*&z);
    sys::dump[[usize]](dereference_addressof_z);

    sys::dump[[usize]](v);
    sys::dump[[usize]](*&v);

    sys::dump[[usize]](w);
    sys::dump[[usize]](*&w);

    sys::dump[[usize]](*addressof_v);
    sys::dump[[usize]](*addressof_w);

    sys::dump[[byte]](*addressof_a);

    sys::dump[[[0]ssize]](*addressof_b);
    sys::dump[[*[0]ssize]](addressof_b);
}
################################################################################
# EE FF C0 1D E0 AF DC BA
# EE FF C0 1D E0 AF DC BA
# EE FF C0 1D E0 AF DC BA
# EE FF C0 1D E0 AF DC BA
# EE FF C0 1D E0 AF DC BA
# 06 00 00 00 00 00 00 00
# 06 00 00 00 00 00 00 00
# EF BE AD DE EF BE AD DE
# EF BE AD DE EF BE AD DE
# EF BE AD DE EF BE AD DE
# EF BE AD DE EF BE AD DE
# EF BE AD DE EF BE AD DE
# 0D D0 FE CA 0D D0 FE CA
# 0D D0 FE CA 0D D0 FE CA
# BE BA FE CA BE BA FE CA
# BE BA FE CA BE BA FE CA
# 0D D0 FE CA 0D D0 FE CA
# BE BA FE CA BE BA FE CA
# BB
#
# 00 00 00 00 00 00 00 00
