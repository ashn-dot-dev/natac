import "std";

func test(arguments: [][]byte) void {
    # Transform the provided args into an C-style argument vector.
    var args = std::slice[[*byte]]::new(countof(arguments) + 1);
    for i in countof(args) -1 {
        var str = std::slice[[byte]]::new(countof(arguments[i]) + 1);
        std::slice[[byte]]::copy(str[0:countof(arguments[i])], arguments[i]);
        str[countof(arguments[i])] = '\0';
        args[i] = &str[0];
    }
    args[countof(arguments)] = std::ptr[[byte]]::NULL;

    var iter = std::argument_iterator::init_from_argv(&args[0]);
    var iter = std::iterator[[[]byte]]::init[[typeof(iter)]](&iter);
    for iter.advance() {
        std::print_line(std::out(), *iter.current());
    }
}

func main() void {
    std::print_line(std::out(), "vvv empty argv vvv");
    test((:[][]byte)[]);
    std::print_line(std::out(), "^^^ empty argv ^^^");

    std::print(std::out(), "\n");

    test((:[][]byte)[
        "a.out"
    ]);

    std::print(std::out(), "\n");

    test((:[][]byte)[
        "a.out",
        "foo",
        "--bar",
        "baz"
    ]);

    std::print(std::out(), "\n");

    var args = (:[]*byte)[
        &"a.out\0"[0],
        &"foo\0"[0],
        std::ptr[[byte]]::NULL,
        &"bar\0"[0],
        &"baz\0"[0]
    ];
    var iter = std::argument_iterator::init_from_argv(&args[0]);
    var iter = std::iterator[[[]byte]]::init[[typeof(iter)]](&iter);
    for iter.advance() {
        std::print_line(std::out(), *iter.current());
    }
}
################################################################################
# vvv empty argv vvv
# ^^^ empty argv ^^^
#
# a.out
#
# a.out
# foo
# --bar
# baz
#
# a.out
# foo
