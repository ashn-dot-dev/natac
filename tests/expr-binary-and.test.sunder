import "std";
import "sys";

func func_t() bool {
    std::print_line(std::err(), "func_t");
    return true;
}

func func_f() bool {
    std::print_line(std::err(), "func_f");
    return false;
}

func main() void {
    let t_and_t: bool = true and true;
    let f_and_f: bool = false and false;
    let t_and_f: bool = true and false;
    let f_and_t: bool = false and true;
    sys::dump[[bool]](t_and_t);
    sys::dump[[bool]](f_and_f);
    sys::dump[[bool]](t_and_f);
    sys::dump[[bool]](f_and_t);
    sys::dump[[bool]](true and true);
    sys::dump[[bool]](false and false);
    sys::dump[[bool]](true and false);
    sys::dump[[bool]](false and true);

    std::print(std::err(), "\n");

    sys::dump[[bool]](func_t() and func_t());

    std::print(std::err(), "\n");

    sys::dump[[bool]](func_f() and func_f());

    std::print(std::err(), "\n");

    sys::dump[[bool]](func_t() and func_f());

    std::print(std::err(), "\n");

    sys::dump[[bool]](func_f() and func_t());
}
################################################################################
# 01
# 00
# 00
# 00
# 01
# 00
# 00
# 00
#
# func_t
# func_t
# 01
#
# func_f
# 00
#
# func_t
# func_f
# 00
#
# func_f
# 00
