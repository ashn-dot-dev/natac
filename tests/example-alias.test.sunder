import "std";
import "sys";

type i32 = s32;
var a: i32 = 123;

type unsigned8 = u8;
let b = (:unsigned8)123s;

type array_of_unsigned8 = [4]unsigned8;
let c: array_of_unsigned8 = (:array_of_unsigned8)[0xAA, 0xBB, 0xCC...];

type slice_of_unsigned8 = []unsigned8;
let d: slice_of_unsigned8 = (:slice_of_unsigned8)[0xAA, 0xBB, 0xCC];

type foo = s64;

type some_result = std::result[[unsigned8, []byte]];

struct empty_struct { }
type some_empty_struct = empty_struct;

struct non_empty_struct {
    var a: u16;
    var b: u16;
}
type some_non_empty_struct = non_empty_struct;

func main() void {
    sys::dump[[i32]](a);
    sys::dump[[unsigned8]](b);

    type foo = s32;
    var bar: foo = -1;
    sys::dump[[foo]](bar);

    var r = some_result::init_error("foo");
    std::print_line(std::out(), r.error());

    var i: i32 = 123;
    sys::dump[[usize]](i32::hash(&i));

    type str = *byte;
    var _: str = &"foo"[0];
    type str = []byte; # Shadowing previous declaration.
    var _ = (:str){&"foobar"[0], countof("foobar")};

    var _ = (:some_empty_struct){};
    var _ = (:some_non_empty_struct){.a = 123, .b = 456};
}
################################################################################
# 7B 00 00 00
# 7B
# FF FF FF FF
# foo
# 7B 00 00 00 00 00 00 00
