import "c";
import "nbnet";
import "std";

import "shared.sunder";

func main() void {
    var argparser = std::argument_parser::init((:[][]byte)[]);
    var text = std::optional[[[]byte]]::EMPTY;
    for argparser.advance() {
        if text.is_value() {
            std::print_line(std::err(), "Usage: client TEXT");
            std::exit(std::EXIT_FAILURE);
        }
        text = std::optional[[[]byte]]::init_value(argparser.argument_value());
    }

    if text.is_empty() {
        std::print_line(std::err(), "Usage: client TEXT");
        std::exit(std::EXIT_FAILURE);
    }
    var text = text.value();

    if countof(text) >= (:usize)message::LENGTH {
        std::print_format_line(
            std::err(),
            "error: text length cannot exceed {} bytes",
            (:[]std::formatter)[
                std::formatter::init[[typeof(message::LENGTH)]](&message::LENGTH)]);
        std::exit(std::EXIT_FAILURE);
    }

    NBN_Driver_Init();
    if NBN_GameClient_StartEx(NAME, ADDR, PORT, false, std::ptr[[uint8_t]]::NULL, 0) < 0 {
        std::print_line(std::err(), "error: failed to start client");
        std::exit(std::EXIT_FAILURE);
    }

    NBN_GameClient_RegisterMessage(
        message::TYPE,
        (:NBN_MessageBuilder)message::create,
        (:NBN_MessageDestructor)message::destroy,
        (:NBN_MessageSerializer)message::serialize);

    let dt: double = 1.0 / (:double)TICK_RATE;
    var connected = false;
    var running = true;
    for running {
        var ev: sint = NBN_GameClient_Poll();
        for ev != NBN_NO_EVENT {
            if ev < 0 {
                std::print_line(std::err(), "error: failed to poll event");
                running = false;
                break;
            }

            if ev == NBN_CONNECTED {
                std::print_line(std::err(), "info: connected");
                connected = true;
            }

            if ev == NBN_DISCONNECTED {
                std::print_line(std::err(), "info: disconnected");
                connected = false;
                running = false;
                if NBN_GameClient_GetServerCloseCode() == BUSY_CODE {
                    std::print_line(std::err(), "error: another client is already connected");
                }
                break;
            }

            if ev == NBN_MESSAGE_RECEIVED {
                std::print_line(std::err(), "info: message received");
                var info = NBN_GameClient_GetMessageInfo();
                assert info.type == message::TYPE;
                var incoming = (:*message)info.data;
                var data = incoming.*.data[0:(:usize)incoming.*.length];
                std::print_format_line(
                    std::err(),
                    "incoming message: {} ({} bytes)",
                    (:[]std::formatter)[
                        std::formatter::init[[[]byte]](&data),
                        std::formatter::init[[uint]](&incoming.*.length)]);
                message::destroy(incoming);
            }

            ev = NBN_GameClient_Poll();
        }

        if connected {
            var outgoing = message::create();
            std::slice[[byte]]::copy(outgoing.*.data[0:countof(text)], text);
            outgoing.*.length = (:uint)countof(text);
            var data = outgoing.*.data[0:(:usize)outgoing.*.length];
            std::print_format_line(
                std::err(),
                "outgoing message: {} ({} bytes)",
                (:[]std::formatter)[
                    std::formatter::init[[[]byte]](&data),
                    std::formatter::init[[uint]](&outgoing.*.length)]);

            if NBN_GameClient_SendReliableMessage(message::TYPE, (:*any)outgoing) < 0 {
                std::print_line(std::err(), "error: failed to send message");
                running = false;
                break;
            }
        }

        if NBN_GameClient_SendPackets() < 0 {
            std::print_line(std::err(), "error: failed to send packets");
            running = false;
            break;
        }

        usleep((:uint)(dt * 1000000.0));
    }

    NBN_GameClient_Stop();
}
