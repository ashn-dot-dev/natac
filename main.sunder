import "c";
import "raylib";
import "std";

import "client.sunder";
import "server.sunder";
import "shared.sunder";

func main() void {
    var argparser = std::argument_parser::init((:[][]byte)[
        "debug",
        "fullscreen"
    ]);
    var opt_debug = false;
    var opt_fullscreen = false;
    for argparser.advance() {
        if argparser.check_option("debug") {
            opt_debug = true;
            continue;
        }
        if argparser.check_option("fullscreen") {
            opt_fullscreen = true;
            continue;
        }
    }

    SetTraceLogLevel(LOG_WARNING);
    SetConfigFlags(FLAG_MSAA_4X_HINT);
    InitWindow(800, 600, startof("NATAC"));
    defer CloseWindow();
    SetTargetFPS(60);
    if opt_fullscreen {
        ToggleFullscreen();
    }

    var sstate = server_state::init();
    defer sstate.fini();
    var cstate = client_state::init();
    defer cstate.fini();
    cstate.debug = opt_debug;
    cstate.player = player::RED;

    for not WindowShouldClose() {
        var message = sstate.to_server_message();
        cstate.update_from_server_message(&message);
        message.fini();

        if IsKeyPressed(KEY_F3) {
            cstate.debug = not cstate.debug;
        }
        if IsKeyPressed(KEY_F11) {
            ToggleFullscreen();
        }

        if IsKeyPressed(KEY_ONE) {
            cstate.player = player::RED;
        }
        if IsKeyPressed(KEY_TWO) {
            cstate.player = player::BLUE;
        }
        if IsKeyPressed(KEY_THREE) {
            cstate.player = player::WHITE;
        }
        if IsKeyPressed(KEY_FOUR) {
            cstate.player = player::ORANGE;
        }

        update(&cstate, &sstate);
        render(&cstate);
    }
}
