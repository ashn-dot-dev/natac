import "c";
import "std";

import "bubby";
import "nbnet";
import "raylib";

import "client.sunder";
import "server.sunder";
import "shared.sunder";

struct local_client_message_sender {
    # Server state immediately updated from client messages.
    var server: *server_state;
    # Server message sender passed to passed to the function updating server
    # state from client messages. Required for the server to send responses.
    var sender: *message_sender[[server_message]];

    func send(self: *local_client_message_sender, message: *client_message) void {
        self.*.server.*.update_from_client_message(message, self.*.sender);
    }
}

struct local_server_message_sender {
    # Client state immediately updated from server messages.
    var client: *client_state;

    func send(self: *local_server_message_sender, message: *server_message) void {
        self.*.client.*.update_from_server_message(message);
    }
}

struct nbnet_client_message_sender {
    var connected: bool;

    func init() nbnet_client_message_sender {
        return (:nbnet_client_message_sender){
            .connected = false,
        };
    }

    func send(self: *nbnet_client_message_sender, message: *client_message) void {
        if not self.*.connected {
            std::print_line(std::err(), "error: failed to send client message (not connected to server)");
            return;
        }

        var value = message.*.to_bubby();
        defer value.fini();

        var string = std::string::init();
        defer string.fini();
        var writer = std::writer::init[[std::string]](&string);
        std::print_format(writer, "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&value)]);
        var data = string.data();
        var count = string.count();
        #std::print_format_line(std::err(), "CLIENT MESSAGE STRING: {}", (:[]std::formatter)[std::formatter::init[[[]byte]](&data)]);
        #std::print_format_line(std::err(), "CLIENT MESSAGE LENGTH: {}", (:[]std::formatter)[std::formatter::init[[usize]](&count)]);

        var outgoing = ::message::create();
        outgoing.*.len = (:uint)count;
        std::slice[[byte]]::copy(outgoing.*.buf[0:count], data);

        if NBN_GameClient_SendReliableMessage(::message::TYPE, (:*any)outgoing) < 0 {
            std::print_line(std::err(), "error: failed to send client message");
        }
    }
}

struct nbnet_server_message_sender {
    var client: NBN_ConnectionHandle;

    func init() nbnet_server_message_sender {
        return (:nbnet_server_message_sender){
            .client = (:NBN_ConnectionHandle)0,
        };
    }

    func send(self: *nbnet_server_message_sender, message: *server_message) void {
        if self.*.client == 0 {
            return;
        }

        var value = message.*.to_bubby();
        defer value.fini();

        var string = std::string::init();
        defer string.fini();
        var writer = std::writer::init[[std::string]](&string);
        std::print_format(writer, "{}", (:[]std::formatter)[std::formatter::init[[bubby::value]](&value)]);
        var data = string.data();
        var count = string.count();
        #std::print_format_line(std::err(), "SERVER MESSAGE STRING: {}", (:[]std::formatter)[std::formatter::init[[[]byte]](&data)]);
        #std::print_format_line(std::err(), "SERVER MESSAGE LENGTH: {}", (:[]std::formatter)[std::formatter::init[[usize]](&count)]);

        var outgoing = ::message::create();
        outgoing.*.len = (:uint)count;
        std::slice[[byte]]::copy(outgoing.*.buf[0:count], data);

        if NBN_GameServer_SendReliableMessageTo(self.*.client, ::message::TYPE, outgoing) < 0 {
            std::print_line(std::err(), "error: failed to send server message");
        }
    }
}

enum network {
    LOCAL;
    CLIENT;
    SERVER;
}

func raylib_init(fullscreen: bool) void {
    SetTraceLogLevel(LOG_WARNING);
    SetConfigFlags(FLAG_MSAA_4X_HINT);
    InitWindow(800, 600, startof("NATAC"));
    SetTargetFPS(60);
    if fullscreen {
        ToggleFullscreen();
    }
}

func raylib_fini() void {
    CloseWindow();
}

func run_local(debug: bool, fullscreen: bool) void {
    raylib_init(fullscreen);
    defer raylib_fini();

    var sstate = server_state::init();
    defer sstate.fini();

    var cstate = client_state::init();
    defer cstate.fini();
    cstate.debug = debug;

    var smessage_sender = (:local_server_message_sender){
        .client = &cstate,
    };
    var smessage_sender = message_sender[[server_message]]::init[[local_server_message_sender]](&smessage_sender);
    var cmessage_sender = (:local_client_message_sender){
        .server = &sstate,
        .sender = &smessage_sender,
    };
    var cmessage_sender = message_sender[[client_message]]::init[[local_client_message_sender]](&cmessage_sender);

    for not WindowShouldClose() {
        server_update(&sstate, &smessage_sender);
        client_update(&cstate, &cmessage_sender);
        client_render(&cstate);
    }
}

func run_client(debug: bool, fullscreen: bool, address: *byte) void {
    raylib_init(fullscreen);
    defer raylib_fini();

    NBN_Log_SetIsEnabled(NBN_LogType::NBN_LOG_TRACE, false);
    NBN_Log_SetIsEnabled(NBN_LogType::NBN_LOG_DEBUG, false);
    NBN_Driver_Init();
    var port = 31415u16;
    if NBN_GameClient_StartEx(startof("natac"), address, port, false, std::ptr[[uint8_t]]::NULL, 0) < 0 {
        std::print_line(std::err(), "error: failed to start the nbnet client");
        std::exit(std::EXIT_FAILURE);
    }
    defer NBN_GameClient_Stop();
    NBN_GameClient_RegisterMessage(
        message::TYPE,
        (:NBN_MessageBuilder)message::create,
        (:NBN_MessageDestructor)message::destroy,
        (:NBN_MessageSerializer)message::serialize);

    var cstate = client_state::init();
    defer cstate.fini();
    cstate.debug = debug;

    var client_message_sender = nbnet_client_message_sender::init();
    var message_sender = message_sender[[client_message]]::init[[nbnet_client_message_sender]](&client_message_sender);

    for not WindowShouldClose() {
        for true {
            var ev = NBN_GameClient_Poll();

            if ev < 0 {
                std::print_line(std::err(), "error: failed to poll nbnet event");
                break;
            }

            if ev == NBN_NO_EVENT {
                break;
            }

            if ev == NBN_CONNECTED {
                std::print_line(std::err(), "info: connected to server");
                client_message_sender.connected = true;
            }

            if ev == NBN_DISCONNECTED {
                std::print_line(std::err(), "info: disconnected from server");
                client_message_sender.connected = false;
                if NBN_GameClient_GetServerCloseCode() == BUSY_CODE {
                    std::print_line(std::err(), "error: server sent busy code");
                }
                break;
            }

            if ev == NBN_MESSAGE_RECEIVED {
                std::print_line(std::err(), "info: message received");
                var info = NBN_GameClient_GetMessageInfo();
                assert info.type_ == message::TYPE;
                var incoming = (:*message)info.data;

                var count = (:usize)incoming.*.len;
                var data = (:[]byte){(:*byte)&incoming.*.buf[0], count};
                #std::print_format_line(std::err(), "INCOMING SERVER MESSAGE STRING: {}", (:[]std::formatter)[std::formatter::init[[[]byte]](&data)]);
                #std::print_format_line(std::err(), "INCOMING SERVER MESSAGE LENGTH: {}", (:[]std::formatter)[std::formatter::init[[usize]](&count)]);
                var result = bubby::value::init_from_str(data);
                assert result.is_value(); # XXX: Need to handle decoding error.
                var value = result.value();
                defer value.fini();

                var server_message = server_message::init_from_bubby(&value);
                defer server_message.fini();
                cstate.update_from_server_message(&server_message);

                message::destroy(incoming);
            }
        }

        client_update(&cstate, &message_sender);

        if NBN_GameClient_SendPackets() < 0 {
            std::print_line(std::err(), "error: failed to send nbnet packets");
        }

        client_render(&cstate);
    }

    # Poll remaining nbnet events and clean up outstanding messages.
    for true {
        var ev = NBN_GameClient_Poll();

        if ev < 0 or ev == NBN_NO_EVENT {
            break;
        }

        if ev == NBN_MESSAGE_RECEIVED {
            var info = NBN_GameClient_GetMessageInfo();
            assert info.type_ == message::TYPE;
            var incoming = (:*message)info.data;
            message::destroy(incoming);
        }
    }
}

func run_server() void {
    NBN_Driver_Init();
    var port = 31415u16;
    NBN_Log_SetIsEnabled(NBN_LogType::NBN_LOG_TRACE, false);
    NBN_Log_SetIsEnabled(NBN_LogType::NBN_LOG_DEBUG, false);
    if NBN_GameServer_StartEx(startof("natac"), port, false) < 0 {
        std::print_line(std::err(), "error: failed to start the nbnet server");
        std::exit(std::EXIT_FAILURE);
    }
    defer NBN_GameServer_Stop();
    NBN_GameServer_RegisterMessage(
        message::TYPE,
        (:NBN_MessageBuilder)message::create,
        (:NBN_MessageDestructor)message::destroy,
        (:NBN_MessageSerializer)message::serialize);

    var sstate = server_state::init();
    defer sstate.fini();

    var server_message_sender = nbnet_server_message_sender::init();
    var message_sender = message_sender[[server_message]]::init[[nbnet_server_message_sender]](&server_message_sender);

    for true {
        for true {
            var ev = NBN_GameServer_Poll();

            if ev < 0 {
                std::print_line(std::err(), "error: failed to poll nbnet event");
                break;
            }

            if ev == NBN_NO_EVENT {
                break;
            }

            if ev == NBN_NEW_CONNECTION {
                std::print_line(std::err(), "info: new connection");
                if server_message_sender.client == 0 {
                    server_message_sender.client = NBN_GameServer_GetIncomingConnection();
                    NBN_GameServer_AcceptIncomingConnection();
                }
                else {
                    NBN_GameServer_RejectIncomingConnectionWithCode(BUSY_CODE);
                }
            }

            if ev == NBN_CLIENT_DISCONNECTED {
                std::print_line(std::err(), "info: disconnected");
                if server_message_sender.client != 0 and NBN_GameServer_GetDisconnectedClient() == server_message_sender.client {
                    server_message_sender.client = 0;
                }
            }

            if ev == NBN_CLIENT_MESSAGE_RECEIVED {
                std::print_line(std::err(), "info: message received");

                var info = NBN_GameServer_GetMessageInfo();
                assert info.type_ == message::TYPE;
                var incoming = (:*message)info.data;

                var count = (:usize)incoming.*.len;
                var data = (:[]byte){(:*byte)&incoming.*.buf[0], count};
                #std::print_format_line(std::err(), "INCOMING CLIENT MESSAGE STRING: {}", (:[]std::formatter)[std::formatter::init[[[]byte]](&data)]);
                #std::print_format_line(std::err(), "INCOMING CLIENT MESSAGE LENGTH: {}", (:[]std::formatter)[std::formatter::init[[usize]](&count)]);
                var result = bubby::value::init_from_str(data);
                assert result.is_value(); # XXX: Need to handle decoding error.
                var value = result.value();
                defer value.fini();

                var client_message = client_message::init_from_bubby(&value);
                if info.sender == server_message_sender.client {
                    sstate.update_from_client_message(&client_message, &message_sender);
                }

                message::destroy(incoming);
            }
        }

        server_update(&sstate, &message_sender);

        if NBN_GameServer_SendPackets() < 0 {
            std::print_line(std::err(), "error: failed to send nbnet packets");
            break;
        }
    }

    # Poll remaining nbnet events and clean up outstanding messages.
    for true {
        var ev = NBN_GameClient_Poll();

        if ev < 0 or ev == NBN_NO_EVENT {
            break;
        }

        if ev == NBN_CLIENT_MESSAGE_RECEIVED {
            var info = NBN_GameServer_GetMessageInfo();
            assert info.type_ == message::TYPE;
            var incoming = (:*message)info.data;
            message::destroy(incoming);
        }
    }
}

func main() void {
    # Application Global Allocator.
    var allocator = std::general_allocator::init();
    defer allocator.fini();
    defer {
        var iter = std::general_allocator_iterator::init(&allocator);
        for iter.advance() {
            var size = iter.current().*.size();
            std::print_format_line(
                std::err(),
                "leaked allocation of size {}",
                (:[]std::formatter)[
                    std::formatter::init[[usize]](&size)]);
        }
    }
    var allocator = std::allocator::init[[typeof(allocator)]](&allocator);
    std::set_global_allocator(allocator);

    # Argument Parsing.
    var argparser = std::argument_parser::init((:[][]byte)[
        "debug",
        "fullscreen",

        "local",
        "client:",
        "server",
    ]);
    var opt_debug = false;
    var opt_fullscreen = false;
    var opt_network = std::optional[[network]]::EMPTY;
    var opt_address = std::optional[[*byte]]::EMPTY;
    for argparser.advance() {
        if argparser.check_option("debug") {
            opt_debug = true;
            continue;
        }
        if argparser.check_option("fullscreen") {
            opt_fullscreen = true;
            continue;
        }

        if argparser.check_option("local") {
            opt_network = std::optional[[network]]::init_value(network::LOCAL);
            continue;
        }
        if argparser.check_option("client") {
            opt_network = std::optional[[network]]::init_value(network::CLIENT);
            opt_address = std::optional[[*byte]]::init_value(startof(argparser.argument_value()));
            continue;
        }
        if argparser.check_option("server") {
            opt_network = std::optional[[network]]::init_value(network::SERVER);
            continue;
        }
    }

    # Start the Application Main Loop.
    var network = network::LOCAL;
    if opt_network.is_value() {
        network = opt_network.value();
    }
    switch network {
    ::network::LOCAL {
        run_local(opt_debug, opt_fullscreen);
    }
    ::network::CLIENT {
        run_client(opt_debug, opt_fullscreen, opt_address.value());
    }
    ::network::SERVER {
        run_server();
    }
    }
}
